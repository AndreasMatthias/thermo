# -*- coding: utf-8 -*-
'''Chemical Engineering Design Library (ChEDL). Utilities for process modeling.
Copyright (C) 2017, Caleb Bell <Caleb.Andrew.Bell@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'''

from numpy.testing import assert_allclose
import pytest
import numpy as np
import pandas as pd
from thermo.unifac import *
from fluids.numerics import *
from fluids.constants import R


def test_UNIFAC_data():
    # Test the interaction pairs
    assert len(UFIP) == 54
    assert sum([len(i) for i in UFIP.values()]) == 1270
    val_sum = sum([np.sum(np.abs(list(i.values()))) for i in UFIP.values()])
    assert_allclose(val_sum, 449152.27169999998)
    assert_allclose(UFIP[1][2], 86.02)
    
    for G in UFIP.keys():
        assert G in UFMG
        for G2 in UFIP[G].keys():
            assert G2 in UFMG
    
    for G in UFSG.values():
        assert G.main_group_id in UFMG
        assert UFMG[G.main_group_id][0] == G.main_group
        
    # subgroup strings:
    # [i.group for i in UFSG.values()]
    # ['CH3', 'CH2', 'CH', 'C', 'CH2=CH', 'CH=CH', 'CH2=C', 'CH=C', 'ACH', 'AC', 'ACCH3', 'ACCH2', 'ACCH', 'OH', 'CH3OH', 'H2O', 'ACOH', 'CH3CO', 'CH2CO', 'CHO', 'CH3COO', 'CH2COO', 'HCOO', 'CH3O', 'CH2O', 'CHO', 'THF', 'CH3NH2', 'CH2NH2', 'CHNH2', 'CH3NH', 'CH2NH', 'CHNH', 'CH3N', 'CH2N', 'ACNH2', 'C5H5N', 'C5H4N', 'C5H3N', 'CH3CN', 'CH2CN', 'COOH', 'HCOOH', 'CH2CL', 'CHCL', 'CCL', 'CH2CL2', 'CHCL2', 'CCL2', 'CHCL3', 'CCL3', 'CCL4', 'ACCL', 'CH3NO2', 'CH2NO2', 'CHNO2', 'ACNO2', 'CS2', 'CH3SH', 'CH2SH', 'FURFURAL', 'DOH', 'I', 'BR', 'CH=-C', 'C=-C', 'DMSO', 'ACRY', 'CL-(C=C)', 'C=C', 'ACF', 'DMF', 'HCON(..', 'CF3', 'CF2', 'CF', 'COO', 'SIH3', 'SIH2', 'SIH', 'SI', 'SIH2O', 'SIHO', 'SIO', 'NMP', 'CCL3F', 'CCL2F', 'HCCL2F', 'HCCLF', 'CCLF2', 'HCCLF2', 'CCLF3', 'CCL2F2', 'AMH2', 'AMHCH3', 'AMHCH2', 'AM(CH3)2', 'AMCH3CH2', 'AM(CH2)2', 'C2H5O2', 'C2H4O2', 'CH3S', 'CH2S', 'CHS', 'MORPH', 'C4H4S', 'C4H3S', 'C4H2S', 'NCO', '(CH2)2SU', 'CH2CHSU', 'IMIDAZOL', 'BTI']
    # Main group strings:
    # [i[0] for i in UFMG.values()]
    # ['CH2', 'C=C', 'ACH', 'ACCH2', 'OH', 'CH3OH', 'H2O', 'ACOH', 'CH2CO', 'CHO', 'CCOO', 'HCOO', 'CH2O', 'CNH2', 'CNH', '(C)3N', 'ACNH2', 'PYRIDINE', 'CCN', 'COOH', 'CCL', 'CCL2', 'CCL3', 'CCL4', 'ACCL', 'CNO2', 'ACNO2', 'CS2', 'CH3SH', 'FURFURAL', 'DOH', 'I', 'BR', 'C=-C', 'DMSO', 'ACRY', 'CLCC', 'ACF', 'DMF', 'CF2', 'COO', 'SIH2', 'SIO', 'NMP', 'CCLF', 'CON(AM)', 'OCCOH', 'CH2S', 'MORPH', 'THIOPHEN', 'NCO', 'SULFONES', 'IMIDAZOL', 'BTI']

def test_modified_UNIFAC_data():
    assert len(DOUFIP2006) == 61
    assert len(DOUFIP2016) == 65
    assert sum([len(i) for i in DOUFIP2016.values()]) == 1516
    assert sum([len(i) for i in DOUFIP2006.values()]) == 1318
    val_sum = np.sum(np.abs(np.vstack([np.array(list(i.values())) for i in DOUFIP2006.values() if i.values()])), axis=0)
    assert_allclose(val_sum, [831285.1119000008, 2645.011300000001, 3.068751211])          
    val_sum = np.sum(np.abs(np.vstack([np.array(list(i.values())) for i in DOUFIP2016.values() if i.values()])), axis=0)
    assert_allclose(val_sum, [1011296.5521000021, 3170.4274820000005, 3.7356898600000004])          
              
    assert_allclose(DOUFIP2016[1][2], (189.66, -0.2723, 0.0))
    assert_allclose(DOUFIP2006[1][2], (189.66, -0.2723, 0.0))

    for G in DOUFSG.values():
        assert G.main_group_id in DOUFMG
        assert DOUFMG[G.main_group_id][0] == G.main_group
 
    for d in [DOUFIP2006]:
        for G in d.keys():
            assert G in DOUFMG
            for G2 in d[G].keys():
                assert G2 in DOUFMG
    # Missing some of them for DOUFIP2016 - the actual groups are known but not the numbers


    # [i.group for i in DOUFSG.values()]
    # ['CH3', 'CH2', 'CH', 'C', 'CH2=CH', 'CH=CH', 'CH2=C', 'CH=C', 'ACH', 'AC', 'ACCH3', 'ACCH2', 'ACCH', 'OH(P)', 'CH3OH', 'H2O', 'ACOH', 'CH3CO', 'CH2CO', 'CHO', 'CH3COO', 'CH2COO', 'HCOO', 'CH3O', 'CH2O', 'CHO', 'THF', 'CH3NH2', 'CH2NH2', 'CHNH2', 'CH3NH', 'CH2NH', 'CHNH', 'CH3N', 'CH2N', 'ACNH2', 'AC2H2N', 'AC2HN', 'AC2N', 'CH3CN', 'CH2CN', 'COOH', 'HCOOH', 'CH2CL', 'CHCL', 'CCL', 'CH2CL2', 'CHCL2', 'CCL2', 'CHCL3', 'CCL3', 'CCL4', 'ACCL', 'CH3NO2', 'CH2NO2', 'CHNO2', 'ACNO2', 'CS2', 'CH3SH', 'CH2SH', 'FURFURAL', 'DOH', 'I', 'BR', 'CH=-C', 'C=-C', 'DMSO', 'ACRY', 'CL-(C=C)', 'C=C', 'ACF', 'DMF', 'HCON(..', 'CF3', 'CF2', 'CF', 'COO', 'CY-CH2', 'CY-CH', 'CY-C', 'OH(S)', 'OH(T)', 'CY-CH2O', 'TRIOXAN', 'CNH2', 'NMP', 'NEP', 'NIPP', 'NTBP', 'CONH2', 'CONHCH3', 'CONHCH2', 'AM(CH3)2', 'AMCH3CH2', 'AM(CH2)2', 'AC2H2S', 'AC2HS', 'AC2S', 'H2COCH', 'COCH', 'HCOCH', '(CH2)2SU', 'CH2SUCH', '(CH3)2CB', '(CH2)2CB', 'CH2CH3CB', 'H2COCH2', 'CH3S', 'CH2S', 'CHS', 'H2COC', 'C3H2N2+', 'BTI-', 'C3H3N2+', 'C4H8N+', 'BF4-', 'C5H5N+', 'OTF-', '-S-S-']
    # [i[0] for i in UFMG.values()]
    # [i[0] for i in DOUFMG.values()]
    # ['CH2', 'C=C', 'ACH', 'ACCH2', 'OH', 'CH3OH', 'H2O', 'ACOH', 'CH2CO', 'CHO', 'CCOO', 'HCOO', 'CH2O', 'CH2NH2', 'CH2NH', '(C)3N', 'ACNH2', 'PYRIDINE', 'CH2CN', 'COOH', 'CCL', 'CCL2', 'CCL3', 'CCL4', 'ACCL', 'CNO2', 'ACNO2', 'CS2', 'CH3SH', 'FURFURAL', 'DOH', 'I', 'BR', 'C=-C', 'DMSO', 'ACRY', 'CLCC', 'ACF', 'DMF', 'CF2', 'COO', 'CY-CH2', 'CY-CH2O', 'HCOOH', 'CHCL3', 'CY-CONC', 'CONR', 'CONR2', 'HCONR', 'ACS', 'EPOXIDES', 'CARBONAT', 'SULFONE', 'SULFIDES', 'IMIDAZOL', 'BTI', 'PYRROL', 'BF4', 'PYRIDIN', 'OTF', 'DISULFIDES']
def test_modified_UNIFAC_NIST_data():
    pass

def test_UNIFAC():
    # Gmehling
    # 05.22 VLE of Hexane-Butanone-2 Via UNIFAC (p. 289)
    # Mathcad (2001) - Solution (zip) - step by step
    # http://chemthermo.ddbst.com/Problems_Solutions/Mathcad_Files/05.22a%20VLE%20of%20Hexane-Butanone-2%20Via%20UNIFAC%20-%20Step%20by%20Step.xps
    gammas_0522A = UNIFAC_gammas(chemgroups=[{1:2, 2:4}, {1:1, 2:1, 18:1}], T=60+273.15, xs=[0.5, 0.5])
    assert_allclose(gammas_0522A, [1.4276025835624173, 1.3646545010104225])
    assert_allclose(gammas_0522A, [1.428, 1.365], atol=0.001)
    assert_allclose(gammas_0522A, [1.4276, 1.36466], atol=0.0001) # Another calculator
    
    
    
    # Example 4.14 Activity Coefficients of Ethanol + Benzene with the UNIFAC method
    # Walas, Phase Equilibria in Chemical Engineering
    gammas_414 = UNIFAC_gammas(chemgroups=[{1:1, 2:1, 14:1}, {9:6}], T=345., xs=[0.2, 0.8])
    assert_allclose(gammas_414, [2.90999524962436, 1.1038643452317465])
    # Matches faily closely. Confirmed it uses the same coefficients.
    assert_allclose(gammas_414, [2.9119, 1.10832], atol=0.005)
    
    # Examples from ACTCOEFF.XLS, chethermo, from Introductory Chemical Engineering 
    # Thermodynamics, 2nd Ed.: an undergraduate chemical engineering text,
    #  J.Richard Elliott and Carl T. Lira, http://chethermo.net/
    # All match exactly; not even a different gas constant used
    # isopropyl alcohol-water
    gammas_ACTCOEFF_1 = UNIFAC_gammas(chemgroups=[{1:2, 3:1, 14:1}, {16:1}], T=80.37+273.15, xs=[0.5, 0.5])
    gammas_ACTCOEFF_1_expect = [1.2667572876079400, 1.700192255741180]
    assert_allclose(gammas_ACTCOEFF_1, gammas_ACTCOEFF_1_expect)
    gammas_ACTCOEFF_2 = UNIFAC_gammas(chemgroups=[{1:2, 3:1, 14:1}, {16:1}], T=80.37+273.15, xs=[0.1, 0.9])
    gammas_ACTCOEFF_2_expect = [5.0971362612830500, 1.058637792621310]
    assert_allclose(gammas_ACTCOEFF_2, gammas_ACTCOEFF_2_expect)
    # Add in Propionic acid
    gammas_ACTCOEFF_3 = UNIFAC_gammas(chemgroups=[{1:2, 3:1, 14:1}, {16:1}, {1:1, 2:1, 42:1}], T=80.37+273.15, xs=[0.1, 0.1, 0.8])
    gammas_ACTCOEFF_3_expect = [0.9968890535625640, 2.170957708441830, 1.0011209111895400]
    assert_allclose(gammas_ACTCOEFF_3, gammas_ACTCOEFF_3_expect)
    # Add in ethanol
    gammas_ACTCOEFF_4 = UNIFAC_gammas(chemgroups=[{1:2, 3:1, 14:1}, {16:1}, {1:1, 2:1, 42:1}, {1:1, 2:1, 14:1}], T=80.37+273.15, xs=[0.01, 0.01, 0.01, .97])
    gammas_ACTCOEFF_4_expect = [1.0172562157805600, 2.721887947655120, 0.9872477280109450, 1.000190624095510]
    assert_allclose(gammas_ACTCOEFF_4, gammas_ACTCOEFF_4_expect)
    # Add in pentane
    gammas_ACTCOEFF_5 = UNIFAC_gammas(chemgroups=[{1:2, 3:1, 14:1}, {16:1}, {1:1, 2:1, 42:1}, {1:1, 2:1, 14:1}, {1:2, 2:3}], T=80.37+273.15, xs=[.1, .05, .1, .25, .5])
    gammas_ACTCOEFF_5_expect = [1.2773557137580500, 8.017146862811100, 1.1282116576861800, 1.485860948162550, 1.757426505841570]
    assert_allclose(gammas_ACTCOEFF_5, gammas_ACTCOEFF_5_expect)


    # Acetone and Pentane at 307 K and x1 = 0.047
    # Example 8-12 in Poling et al., 5E
    gammas_Poling_5e = UNIFAC_gammas(chemgroups=[{1:1, 18:1}, {1:2, 2:3}], T=307, xs=[0.047, 0.953])
    gammas_Poling_known = [4.992034311484559, 1.00526021118788]
    assert_allclose(gammas_Poling_5e, gammas_Poling_known)
    assert_allclose(gammas_Poling_5e, [4.99, 1.005], atol=0.003)
    
    gammas_Poling_with_cache = UNIFAC_gammas(chemgroups=[{1:1, 18:1}, {1:2, 2:3}], T=307, xs=[0.047, 0.953], cached=([2.5735, 3.8254], [2.336, 3.316], {1: 3, 18: 1, 2: 3}))
    assert_allclose(gammas_Poling_with_cache, gammas_Poling_known)
    # Test the caching
    
    # Another case with the same mixture
    gammas_custom = UNIFAC_gammas(chemgroups=[{1:1, 18:1}, {1:2, 2:3}], T=307, xs=[.674747, .325251])
    assert_allclose(gammas_custom, [1.1645751997624518, 2.105331695192004])


def test_UNIFAC_modified_2006():
    # 11.02 Azeotropic Points in the Quaternary System Benzene - Cyclohexane - Acetone - Ethanol Using Mod. UNIFAC-1.xps
    # Note this test does not sum up to 1?
    gammas_1102_1 = UNIFAC_gammas(chemgroups=[{9:6}, {78:6}, {1:1, 18:1}, {1:1, 2:1, 14:1}], T=373.15, xs=[0.2, 0.3, 0.2, 0.2],
                             subgroup_data=DOUFSG, interaction_data=DOUFIP2006, modified=True)
    # Values in .xps
    gammas_1102_1_known = [1.18643111, 1.44028013, 1.20447983, 1.97207061]
    assert_allclose(gammas_1102_1, gammas_1102_1_known)
    # Recalculated values with more precision, still matching exactly
    gammas_1102_1_known2 = [1.18643111370682970, 1.44028013391119700, 1.20447983349960850, 1.97207060902998130]
    assert_allclose(gammas_1102_1, gammas_1102_1_known2, rtol=1E-14)
    # 290 K, x3=0.3 to balance
    gammas_1102_2 = UNIFAC_gammas(chemgroups=[{9:6}, {78:6}, {1:1, 18:1}, {1:1, 2:1, 14:1}], T=290, xs=[0.2, 0.3, 0.3, 0.2],
                             subgroup_data=DOUFSG, interaction_data=DOUFIP2006, modified=True)
    gammas_1102_2_known = [1.2555831362844658, 2.002790560351622, 1.313653013490284, 2.4472442902051923]
    assert_allclose(gammas_1102_2_known, gammas_1102_2, rtol=1E-13)
    
    # 0.01 mole fractions except last, 250 K
    gammas_1102_3 = UNIFAC_gammas(chemgroups=[{9:6}, {78:6}, {1:1, 18:1}, {1:1, 2:1, 14:1}], T=250, xs=[0.01, 0.01, 0.01, 0.97], subgroup_data=DOUFSG, interaction_data=DOUFIP2006, modified=True)
    gammas_1102_3_known = [6.233033961983859, 10.01994111294437, 3.376394671321658, 1.00137007335149700]
    assert_allclose(gammas_1102_3_known, gammas_1102_3, rtol=1E-13)


def test_UNIFAC_misc():
    from scipy.misc import derivative
    from math import log
    T = 273.15 + 60
    
    def gE_T(T):
        xs = [0.5, 0.5]
        gammas = UNIFAC_gammas(chemgroups=[{1:2, 2:4}, {1:1, 2:1, 18:1}], T=T, xs=xs)
        return R*T*sum(xi*log(gamma) for xi, gamma in zip(xs, gammas))
    
    def hE_T(T):
        to_diff = lambda T: gE_T(T)/T
        return -derivative(to_diff, T,dx=1E-5, order=7)*T**2

    # A source gives 854.758 for hE, matching to within a gas constant
    assert_allclose(hE_T(T), 854.7719207160634)
    assert_allclose(gE_T(T), 923.6411976689174)



def test_Van_der_Waals_area():
    # DIPPR and YAWS, hexane, units are good
    assert_allclose(Van_der_Waals_area(3.856), 964000.0)

def test_Van_der_Waals_volume():
    # DIPPR and YAWS, hexane, units are good
    assert_allclose(Van_der_Waals_volume(4.4998), 6.826196599999999e-05)
    
    
def test_UNIFAC_psi():
    assert_allclose(UNIFAC_psi(307, 18, 1, UFSG, UFIP), 0.9165248264184787)
    
    assert_allclose(UNIFAC_psi(373.15, 9, 78, DOUFSG, DOUFIP2006, modified=True), 1.3703140538273264)
    


def test_UNIFAC_flash_1():
    from thermo.activity import flash_inner_loop, K_value
    def flash_UNIFAC_sequential_substitution(T, P, zs, Psats, chemgroups):
        gammas = UNIFAC_gammas(chemgroups=chemgroups, T=T, xs=zs)
        Ks = [K_value(P=P, Psat=Psat, gamma=gamma) for Psat, gamma in zip(Psats, gammas)]
        V_over_F, xs, ys = flash_inner_loop(zs, Ks)
        for i in range(100):
            gammas = UNIFAC_gammas(chemgroups=chemgroups, T=T, xs=xs)
            Ks = [K_value(P=P, Psat=Psat, gamma=gamma) for Psat, gamma in zip(Psats, gammas)]
            V_over_F, xs_new, ys_new = flash_inner_loop(zs, Ks)
            err = (sum([abs(x_new - x_old) for x_new, x_old in zip(xs_new, xs)]) +
                  sum([abs(y_new - y_old) for y_new, y_old in zip(ys_new, ys)]))
            xs, ys = xs_new, ys_new
            if err < 1E-11:
                break
        return V_over_F, xs, ys

    T = 307
    P = 1E5
    zs = [0.5, 0.5]
    chemgroups = [{1:1, 18:1}, {1:2, 2:3}]
    Psats = [44501.41359963363, 93853.94807811991]
    ans = flash_UNIFAC_sequential_substitution(T=T, P=P, zs=zs, Psats=Psats, chemgroups=chemgroups)
    assert_allclose(ans[0], 0.5101142364235425)
    assert_allclose(ans[1], [0.6594292844045343, 0.34057071559546576])
    assert_allclose(ans[2], [0.3468928503651561, 0.653107149634844])
    
    
    
def test_UNIFAC_class():
    T = 373.15
    xs = [0.2, 0.3, 0.1, 0.4]
    chemgroups = [{9:6}, {78:6}, {1:1, 18:1}, {1:1, 2:1, 14:1}]
    # m = Mixture(['benzene', 'cyclohexane', 'acetone', 'ethanol'], zs=xs, T=T, P=1e5)
    GE = UNIFAC.from_subgroups(T=T, xs=xs, chemgroups=chemgroups, version=1,
                               interaction_data=DOUFIP2006, subgroups=DOUFSG)    

    Vis_expect = [0.7607527334602491, 1.4426605118183198, 0.7875398015398353, 0.840743299021177]
    assert_allclose(GE.Vis(), Vis_expect, rtol=1e-12)
    
    Fis_expect = [0.7601728758495722, 1.5191142751587723, 0.8006943182018096, 0.780404276155682]
    assert_allclose(GE.Fis(), Fis_expect, rtol=1e-12)
    
    def to_jac_Vis(xs):
        return GE.to_T_xs(T, xs).Vis()
    
    dVis_dxs_expect = [[-0.5787447214672409, -1.0975079278209487, -0.5991230567301719, -0.6395977628687479], [-1.0975079278209487, -2.0812693523598966, -1.1361525731667568, -1.2129071580737139], [-0.5991230567301719, -1.1361525731667568, -0.6202189390094032, -0.6621188108570841], [-0.6395977628687479, -1.2129071580737139, -0.6621188108570841, -0.7068492948490122]]
    dVis_dxs_analytical = GE.dVis_dxs()
    assert_allclose(dVis_dxs_expect, dVis_dxs_analytical, rtol=1e-12)
    dVis_dxs_numerical = jacobian(to_jac_Vis, xs, scalar=False, perturbation=1e-9)
    assert_allclose(dVis_dxs_numerical, dVis_dxs_analytical, rtol=1e-6)
    
    def to_jac_Fis(xs):
        return GE.to_T_xs(T, xs).Fis()
    
    dFis_dxs_expect = [[-0.5778628011774091, -1.1547894672915822, -0.608666102543882, -0.5932421629305685], [-1.1547894672915822, -2.3077081809911624, -1.2163461688188895, -1.1855232763030454], [-0.608666102543882, -1.2163461688188895, -0.6411113912006607, -0.6248652698182505], [-0.5932421629305685, -1.1855232763030454, -0.6248652698182505, -0.6090308342420739]]
    dFis_dxs_analytical = GE.dFis_dxs()
    assert_allclose(dFis_dxs_expect, dFis_dxs_analytical, rtol=1e-12)
    dFis_dxs_numerical = jacobian(to_jac_Fis, xs, scalar=False, perturbation=4e-8)
    assert_allclose(dFis_dxs_numerical, dFis_dxs_analytical, rtol=1e-7)
    
    # Checked to higher precision with numdifftools
    d2Vis_dxixjs_numerical = hessian(to_jac_Vis, xs, scalar=False, perturbation=4e-5)
    d2Vis_dxixjs_expect = [[[0.880563257663788, 1.6698643121681611, 0.9115690061730761, 0.9731514928349204], [1.669864312168161, 3.166662697749667, 1.7286623513290118, 1.8454448718761605], [0.9115690061730761, 1.7286623513290118, 0.943666506390438, 1.0074173904699528], [0.9731514928349204, 1.8454448718761605, 1.0074173904699528, 1.075475066401671]], [[1.669864312168161, 3.166662697749667, 1.7286623513290118, 1.8454448718761605], [3.1666626977496675, 6.005130218214624, 3.278164905416909, 3.499626522909456], [1.7286623513290118, 3.278164905416909, 1.7895307439814416, 1.9104253251112364], [1.8454448718761605, 3.4996265229094554, 1.9104253251112364, 2.0394871309705884]], [[0.9115690061730761, 1.7286623513290118, 0.943666506390438, 1.0074173904699528], [1.7286623513290118, 3.278164905416909, 1.7895307439814416, 1.9104253251112364], [0.9436665063904379, 1.7895307439814416, 0.9768942002774252, 1.0428898337963595], [1.0074173904699528, 1.9104253251112364, 1.0428898337963595, 1.1133439067679272]], [[0.9731514928349204, 1.8454448718761605, 1.0074173904699528, 1.075475066401671], [1.8454448718761605, 3.4996265229094554, 1.9104253251112364, 2.0394871309705884], [1.0074173904699528, 1.9104253251112364, 1.0428898337963595, 1.1133439067679272], [1.075475066401671, 2.039487130970589, 1.1133439067679272, 1.188557616124302]]]
    d2Vis_dxixjs_analytical = GE.d2Vis_dxixjs()
    assert_allclose(d2Vis_dxixjs_numerical, d2Vis_dxixjs_analytical, rtol=1e-4)
    assert_allclose(d2Vis_dxixjs_expect, d2Vis_dxixjs_analytical, rtol=1e-12)
    
    # Checked to higher precision with numdifftools
    d2Fis_dxixjs_numerical = hessian(to_jac_Fis, xs, scalar=False, perturbation=4e-5)
    d2Fis_dxixjs_expect = [[[0.878551254835041, 1.7556792607036749, 0.9253829232058668, 0.9019332021403013], [1.7556792607036749, 3.508514329131273, 1.8492667303593284, 1.8024052766677856], [0.9253829232058666, 1.8492667303593284, 0.9747109799778525, 0.9500112583525165], [0.9019332021403013, 1.8024052766677856, 0.9500112583525168, 0.9259374414937229]], [[1.7556792607036749, 3.508514329131273, 1.8492667303593284, 1.8024052766677856], [3.5085143291312737, 7.011344881288717, 3.6955376571749134, 3.601890665129907], [1.8492667303593284, 3.6955376571749134, 1.9478429326796476, 1.8984835028636846], [1.8024052766677856, 3.601890665129907, 1.8984835028636846, 1.850374868617981]], [[0.9253829232058666, 1.8492667303593284, 0.9747109799778525, 0.9500112583525165], [1.8492667303593284, 3.6955376571749134, 1.9478429326796476, 1.8984835028636846], [0.9747109799778525, 1.9478429326796476, 1.0266684965376531, 1.0006521423702277], [0.9500112583525168, 1.8984835028636846, 1.0006521423702277, 0.9752950571746734]], [[0.9019332021403013, 1.8024052766677856, 0.9500112583525168, 0.9259374414937229], [1.8024052766677856, 3.601890665129907, 1.8984835028636846, 1.850374868617981], [0.9500112583525168, 1.8984835028636846, 1.0006521423702277, 0.9752950571746734], [0.9259374414937227, 1.850374868617981, 0.9752950571746734, 0.9505805347063537]]]
    d2Fis_dxixjs_analytical = GE.d2Fis_dxixjs()
    assert_allclose(d2Fis_dxixjs_numerical, d2Fis_dxixjs_analytical, rtol=1e-4)
    assert_allclose(d2Fis_dxixjs_expect, d2Fis_dxixjs_analytical, rtol=1e-12)

    # Not able to calculate numerical third derivatives
    d3Vis_dxixjxks_sympy = [[[[-2.009672715757163, -3.8110615199689386, -2.0804358395514293, -2.2209829747352616], [-3.8110615199689386, -7.227141909778993, -3.945253827010098, -4.211781692189962], [-2.0804358395514293, -3.945253827010098, -2.153690622634226, -2.2991866006062214], [-2.2209829747352616, -4.211781692189962, -2.2991866006062214, -2.4545117896002413]], [[-3.8110615199689386, -7.227141909778993, -3.945253827010098, -4.211781692189962], [-7.227141909778993, -13.705257684874537, -7.481618737588112, -7.987051330180062], [-3.945253827010098, -7.481618737588112, -4.084171215285101, -4.360083864450171], [-4.211781692189962, -7.987051330180062, -4.360083864450171, -4.654636229228626]], [[-2.0804358395514293, -3.945253827010098, -2.153690622634226, -2.2991866006062214], [-3.945253827010098, -7.481618737588112, -4.084171215285101, -4.360083864450171], [-2.153690622634226, -4.084171215285101, -2.229524799487544, -2.3801438752754542], [-2.2991866006062214, -4.360083864450171, -2.3801438752754542, -2.540938261065038]], [[-2.2209829747352616, -4.211781692189962, -2.2991866006062214, -2.4545117896002413], [-4.211781692189962, -7.987051330180062, -4.360083864450171, -4.654636229228626], [-2.2991866006062214, -4.360083864450171, -2.3801438752754542, -2.540938261065038], [-2.4545117896002413, -4.654636229228626, -2.540938261065038, -2.7125953660246798]]], [[[-3.8110615199689386, -7.227141909778993, -3.945253827010098, -4.211781692189962], [-7.227141909778993, -13.705257684874537, -7.481618737588112, -7.987051330180062], [-3.945253827010098, -7.481618737588112, -4.084171215285101, -4.360083864450171], [-4.211781692189962, -7.987051330180062, -4.360083864450171, -4.654636229228626]], [[-7.227141909778993, -13.705257684874537, -7.481618737588112, -7.987051330180062], [-13.705257684874537, -25.990092702435476, -14.187837180820823, -15.146318972140557], [-7.481618737588112, -14.187837180820823, -7.745056017080649, -8.268285531946963], [-7.987051330180062, -15.146318972140557, -8.268285531946963, -8.826862644638714]], [[-3.945253827010098, -7.481618737588112, -4.084171215285101, -4.360083864450171], [-7.481618737588112, -14.187837180820823, -7.745056017080649, -8.268285531946963], [-4.084171215285101, -7.745056017080649, -4.2279800608937315, -4.513607944184332], [-4.360083864450171, -8.268285531946963, -4.513607944184332, -4.818531871102873]], [[-4.211781692189962, -7.987051330180062, -4.360083864450171, -4.654636229228626], [-7.987051330180062, -15.146318972140557, -8.268285531946963, -8.826862644638714], [-4.360083864450171, -8.268285531946963, -4.513607944184332, -4.818531871102873], [-4.654636229228626, -8.826862644638714, -4.818531871102873, -5.144055416410341]]], [[[-2.0804358395514293, -3.945253827010098, -2.153690622634226, -2.2991866006062214], [-3.945253827010098, -7.481618737588112, -4.084171215285101, -4.360083864450171], [-2.153690622634226, -4.084171215285101, -2.229524799487544, -2.3801438752754542], [-2.2991866006062214, -4.360083864450171, -2.3801438752754542, -2.540938261065038]], [[-3.945253827010098, -7.481618737588112, -4.084171215285101, -4.360083864450171], [-7.481618737588112, -14.187837180820823, -7.745056017080649, -8.268285531946963], [-4.084171215285101, -7.745056017080649, -4.2279800608937315, -4.513607944184332], [-4.360083864450171, -8.268285531946963, -4.513607944184332, -4.818531871102873]], [[-2.153690622634226, -4.084171215285101, -2.229524799487544, -2.3801438752754542], [-4.084171215285101, -7.745056017080649, -4.2279800608937315, -4.513607944184332], [-2.229524799487544, -4.2279800608937315, -2.3080291938356967, -2.4639517582076884], [-2.3801438752754542, -4.513607944184332, -2.4639517582076884, -2.630407918144793]], [[-2.2991866006062214, -4.360083864450171, -2.3801438752754542, -2.540938261065038], [-4.360083864450171, -8.268285531946963, -4.513607944184332, -4.818531871102873], [-2.3801438752754542, -4.513607944184332, -2.4639517582076884, -2.630407918144793], [-2.540938261065038, -4.818531871102873, -2.630407918144793, -2.8081092873635765]]], [[[-2.2209829747352616, -4.211781692189962, -2.2991866006062214, -2.4545117896002413], [-4.211781692189962, -7.987051330180062, -4.360083864450171, -4.654636229228626], [-2.2991866006062214, -4.360083864450171, -2.3801438752754542, -2.540938261065038], [-2.4545117896002413, -4.654636229228626, -2.540938261065038, -2.7125953660246798]], [[-4.211781692189962, -7.987051330180062, -4.360083864450171, -4.654636229228626], [-7.987051330180062, -15.146318972140557, -8.268285531946963, -8.826862644638714], [-4.360083864450171, -8.268285531946963, -4.513607944184332, -4.818531871102873], [-4.654636229228626, -8.826862644638714, -4.818531871102873, -5.144055416410341]], [[-2.2991866006062214, -4.360083864450171, -2.3801438752754542, -2.540938261065038], [-4.360083864450171, -8.268285531946963, -4.513607944184332, -4.818531871102873], [-2.3801438752754542, -4.513607944184332, -2.4639517582076884, -2.630407918144793], [-2.540938261065038, -4.818531871102873, -2.630407918144793, -2.8081092873635765]], [[-2.4545117896002413, -4.654636229228626, -2.540938261065038, -2.7125953660246798], [-4.654636229228626, -8.826862644638714, -4.818531871102873, -5.144055416410341], [-2.540938261065038, -4.818531871102873, -2.630407918144793, -2.8081092873635765], [-2.7125953660246798, -5.144055416410341, -2.8081092873635765, -2.9978155537712734]]]]
    d3Vis_dxixjxks_analytical = GE.d3Vis_dxixjxks()
    assert_allclose(d3Vis_dxixjxks_analytical, d3Vis_dxixjxks_sympy, rtol=1e-12)
    '''
    cmps = range(4)
    xs = x0, x1, x2, x3 = symbols('x0, x1, x2, x3')
    rs = r0, r1, r2, r3 = symbols('r0, r1, r2, r3')
    rsxs = sum([rs[i]*xs[i] for i in cmps])
    Vis = [rs[i]/rsxs for i in cmps]
    
    # qsxs = sum([qs[i]*xs[i] for i in cmps])
    # Fis = [qs[i]/qsxs for i in cmps]
    to_subs = {rs[i]: v for i, v in zip(cmps, [2.2578, 4.2816, 2.3373, 2.4952])}
    for xi, xv in zip(xs, [0.2, 0.3, 0.1, 0.4]):
        to_subs[xi] = xv
    print([[[[float(diff(Vis[i], xk, xj, xi).subs(to_subs)) for i in cmps] for xk in xs] for xj in xs] for xi in xs])
    '''
    
    d3Fis_dxixjxks_sympy = [[[[-2.0035525019076115, -4.003859258035692, -2.1103529939864636, -2.05687546828562], [-4.003859258035692, -8.00123228260546, -4.21728722589056, -4.110418807832985], [-2.1103529939864636, -4.21728722589056, -2.2228465463157576, -2.166518371053911], [-2.05687546828562, -4.110418807832985, -2.166518371053911, -2.1116175832712356]], [[-4.003859258035692, -8.00123228260546, -4.21728722589056, -4.110418807832985], [-8.00123228260546, -15.989502605947267, -8.427742465995134, -8.21417875622259], [-4.21728722589056, -8.427742465995134, -4.442092091515058, -4.329526992374571], [-4.110418807832985, -8.21417875622259, -4.329526992374571, -4.219814355831316]], [[-2.1103529939864636, -4.21728722589056, -2.2228465463157576, -2.166518371053911], [-4.21728722589056, -8.427742465995134, -4.442092091515058, -4.329526992374571], [-2.2228465463157576, -4.442092091515058, -2.3413366306715533, -2.282005850371835], [-2.166518371053911, -4.329526992374571, -2.282005850371835, -2.224178545243034]], [[-2.05687546828562, -4.110418807832985, -2.166518371053911, -2.1116175832712356], [-4.110418807832985, -8.21417875622259, -4.329526992374571, -4.219814355831316], [-2.166518371053911, -4.329526992374571, -2.282005850371835, -2.224178545243034], [-2.1116175832712356, -4.219814355831316, -2.224178545243034, -2.1678166163830594]]], [[[-4.003859258035692, -8.00123228260546, -4.21728722589056, -4.110418807832985], [-8.00123228260546, -15.989502605947267, -8.427742465995134, -8.21417875622259], [-4.21728722589056, -8.427742465995134, -4.442092091515058, -4.329526992374571], [-4.110418807832985, -8.21417875622259, -4.329526992374571, -4.219814355831316]], [[-8.00123228260546, -15.989502605947267, -8.427742465995134, -8.21417875622259], [-15.989502605947267, -31.953102291681244, -16.841832028203655, -16.415050580879907], [-8.427742465995134, -16.841832028203655, -8.876988014402343, -8.652040171060962], [-8.21417875622259, -16.415050580879907, -8.652040171060962, -8.432792631937842]], [[-4.21728722589056, -8.427742465995134, -4.442092091515058, -4.329526992374571], [-8.427742465995134, -16.841832028203655, -8.876988014402343, -8.652040171060962], [-4.442092091515058, -8.876988014402343, -4.678880306838432, -4.560314861828465], [-4.329526992374571, -8.652040171060962, -4.560314861828465, -4.444753931537513]], [[-4.110418807832985, -8.21417875622259, -4.329526992374571, -4.219814355831316], [-8.21417875622259, -16.415050580879907, -8.652040171060962, -8.432792631937842], [-4.329526992374571, -8.652040171060962, -4.560314861828465, -4.444753931537513], [-4.219814355831316, -8.432792631937842, -4.444753931537513, -4.3321213798814435]]], [[[-2.1103529939864636, -4.21728722589056, -2.2228465463157576, -2.166518371053911], [-4.21728722589056, -8.427742465995134, -4.442092091515058, -4.329526992374571], [-2.2228465463157576, -4.442092091515058, -2.3413366306715533, -2.282005850371835], [-2.166518371053911, -4.329526992374571, -2.282005850371835, -2.224178545243034]], [[-4.21728722589056, -8.427742465995134, -4.442092091515058, -4.329526992374571], [-8.427742465995134, -16.841832028203655, -8.876988014402343, -8.652040171060962], [-4.442092091515058, -8.876988014402343, -4.678880306838432, -4.560314861828465], [-4.329526992374571, -8.652040171060962, -4.560314861828465, -4.444753931537513]], [[-2.2228465463157576, -4.442092091515058, -2.3413366306715533, -2.282005850371835], [-4.442092091515058, -8.876988014402343, -4.678880306838432, -4.560314861828465], [-2.3413366306715533, -4.678880306838432, -2.46614289556348, -2.4036494546769296], [-2.282005850371835, -4.560314861828465, -2.4036494546769296, -2.3427396325502112]], [[-2.166518371053911, -4.329526992374571, -2.282005850371835, -2.224178545243034], [-4.329526992374571, -8.652040171060962, -4.560314861828465, -4.444753931537513], [-2.282005850371835, -4.560314861828465, -2.4036494546769296, -2.3427396325502112], [-2.224178545243034, -4.444753931537513, -2.3427396325502112, -2.283373299397847]]], [[[-2.05687546828562, -4.110418807832985, -2.166518371053911, -2.1116175832712356], [-4.110418807832985, -8.21417875622259, -4.329526992374571, -4.219814355831316], [-2.166518371053911, -4.329526992374571, -2.282005850371835, -2.224178545243034], [-2.1116175832712356, -4.219814355831316, -2.224178545243034, -2.1678166163830594]], [[-4.110418807832985, -8.21417875622259, -4.329526992374571, -4.219814355831316], [-8.21417875622259, -16.415050580879907, -8.652040171060962, -8.432792631937842], [-4.329526992374571, -8.652040171060962, -4.560314861828465, -4.444753931537513], [-4.219814355831316, -8.432792631937842, -4.444753931537513, -4.3321213798814435]], [[-2.166518371053911, -4.329526992374571, -2.282005850371835, -2.224178545243034], [-4.329526992374571, -8.652040171060962, -4.560314861828465, -4.444753931537513], [-2.282005850371835, -4.560314861828465, -2.4036494546769296, -2.3427396325502112], [-2.224178545243034, -4.444753931537513, -2.3427396325502112, -2.283373299397847]], [[-2.1116175832712356, -4.219814355831316, -2.224178545243034, -2.1678166163830594], [-4.219814355831316, -8.432792631937842, -4.444753931537513, -4.3321213798814435], [-2.224178545243034, -4.444753931537513, -2.3427396325502112, -2.283373299397847], [-2.1678166163830594, -4.3321213798814435, -2.283373299397847, -2.22551134234558]]]]
    d3Fis_dxixjxks_analytical = GE.d3Fis_dxixjxks()
    assert_allclose(d3Fis_dxixjxks_analytical, d3Fis_dxixjxks_sympy, rtol=1e-12)
    '''
    cmps = range(4)
    xs = x0, x1, x2, x3 = symbols('x0, x1, x2, x3')
    qs = q0, q1, q2, q3 = symbols('q0, q1, q2, q3')
    
    qsxs = sum([qs[i]*xs[i] for i in cmps])
    Fis = [qs[i]/qsxs for i in cmps]
    to_subs = {qs[i]: v for i, v in zip(cmps, [2.5926, 5.181, 2.7308, 2.6616])}
    for xi, xv in zip(xs, [0.2, 0.3, 0.1, 0.4]):
        to_subs[xi] = xv
    print([[[[float(diff(Fis[i], xk, xj, xi).subs(to_subs)) for i in cmps] for xk in xs] for xj in xs] for xi in xs])
    '''
    
    def to_jac_Vis_Dortmund(xs):
        return GE.to_T_xs(T, xs).Vis_Dortmund()
    
    Vis_Dortmund_expect = [0.8206306935897535, 1.3261364857739248, 0.8422082656458846, 0.8845302224632082]
    assert_allclose(GE.Vis_Dortmund(), Vis_Dortmund_expect, rtol=1e-12)
    
    dVis_Dortmund_dxs_expect = [[-0.6734347352615999, -1.0882683041153345, -0.6911419531840057, -0.7258726499610816], [-1.0882683041153345, -1.7586379789008155, -1.1168831096933858, -1.1730078007781872], [-0.6911419531840057, -1.1168831096933858, -0.7093147627222489, -0.7449586645721071], [-0.7258726499610816, -1.1730078007781872, -0.7449586645721071, -0.7823937144508127]]
    dVis_Dortmund_dxs_analytical = GE.dVis_Dortmund_dxs()
    assert_allclose(dVis_Dortmund_dxs_expect, dVis_Dortmund_dxs_analytical, rtol=1e-12)
    dVis_Dortmund_dxs_numerical = jacobian(to_jac_Vis_Dortmund, xs, scalar=False, perturbation=1e-9)
    assert_allclose(dVis_Dortmund_dxs_numerical, dVis_Dortmund_dxs_analytical, rtol=1e-6)
    
    # Checked to higher precision with numdifftools
    d2Vis_Dortmund_dxixjs_numerical = hessian(to_jac_Vis_Dortmund, xs, scalar=False, perturbation=4e-5)
    d2Vis_Dortmund_dxixjs_expect = [[[1.1052824277703177, 1.7861327464358234, 1.134344600820735, 1.1913467523907895], [1.7861327464358234, 2.886384608797317, 1.833097121932728, 1.9252124102775903], [1.134344600820735, 1.833097121932728, 1.1641709314124211, 1.2226718912070096], [1.1913467523907895, 1.9252124102775903, 1.2226718912070096, 1.284112593100068]], [[1.7861327464358234, 2.886384608797317, 1.833097121932728, 1.9252124102775903], [2.886384608797317, 4.664387978176171, 2.9622788842180796, 3.1111368854187704], [1.8330971219327277, 2.9622788842180796, 1.8812963734880972, 1.9758337309649805], [1.9252124102775903, 3.1111368854187704, 1.9758337309649805, 2.0751217019468173]], [[1.134344600820735, 1.833097121932728, 1.1641709314124211, 1.2226718912070096], [1.8330971219327277, 2.9622788842180796, 1.8812963734880972, 1.9758337309649805], [1.1641709314124211, 1.8812963734880972, 1.194781512218655, 1.2548206897342973], [1.2226718912070096, 1.9758337309649805, 1.2548206897342973, 1.317876906599721]], [[1.1913467523907895, 1.9252124102775903, 1.2226718912070096, 1.284112593100068], [1.9252124102775903, 3.1111368854187704, 1.9758337309649805, 2.0751217019468173], [1.2226718912070096, 1.9758337309649805, 1.2548206897342973, 1.317876906599721], [1.284112593100068, 2.0751217019468173, 1.317876906599721, 1.3841017725939864]]]
    d2Vis_Dortmund_dxixjs_analytical = GE.d2Vis_Dortmund_dxixjs()
    assert_allclose(d2Vis_Dortmund_dxixjs_numerical, d2Vis_Dortmund_dxixjs_analytical, rtol=1e-4)
    assert_allclose(d2Vis_Dortmund_dxixjs_expect, d2Vis_Dortmund_dxixjs_analytical, rtol=1e-12)
    
    # Not able to calculate numerical third derivatives
    d3Vis_Dortmund_dxixjxks_sympy = [[[[-2.721086055941168, -4.397266063653004, -2.7926339896239365, -2.9329671351610633], [-4.397266063653004, -7.105967410452397, -4.512887287767106, -4.739665186661101], [-2.7926339896239365, -4.512887287767106, -2.8660631967060146, -3.0100862463417126], [-2.9329671351610633, -4.739665186661101, -3.0100862463417126, -3.161346623769138]], [[-4.397266063653004, -7.105967410452397, -4.512887287767106, -4.739665186661101], [-7.105967410452397, -11.48321982510726, -7.292810926086492, -7.659283260401616], [-4.512887287767106, -7.292810926086492, -4.631548643470277, -4.864289415179469], [-4.739665186661101, -7.659283260401616, -4.864289415179469, -5.108725684655301]], [[-2.7926339896239365, -4.512887287767106, -2.8660631967060146, -3.0100862463417126], [-4.512887287767106, -7.292810926086492, -4.631548643470277, -4.864289415179469], [-2.8660631967060146, -4.631548643470277, -2.9414231431806286, -3.089233118842289], [-3.0100862463417126, -4.864289415179469, -3.089233118842289, -3.2444707197865448]], [[-2.9329671351610633, -4.739665186661101, -3.0100862463417126, -3.161346623769138], [-4.739665186661101, -7.659283260401616, -4.864289415179469, -5.108725684655301], [-3.0100862463417126, -4.864289415179469, -3.089233118842289, -3.2444707197865448], [-3.161346623769138, -5.108725684655301, -3.2444707197865448, -3.4075091929278334]]], [[[-4.397266063653004, -7.105967410452397, -4.512887287767106, -4.739665186661101], [-7.105967410452397, -11.48321982510726, -7.292810926086492, -7.659283260401616], [-4.512887287767106, -7.292810926086492, -4.631548643470277, -4.864289415179469], [-4.739665186661101, -7.659283260401616, -4.864289415179469, -5.108725684655301]], [[-7.105967410452397, -11.48321982510726, -7.292810926086492, -7.659283260401616], [-11.48321982510726, -18.556845244994072, -11.785158328197802, -12.377376407972651], [-7.292810926086492, -11.785158328197802, -7.484567284310206, -7.860675601366448], [-7.659283260401616, -12.377376407972651, -7.860675601366448, -8.255683804118878]], [[-4.512887287767106, -7.292810926086492, -4.631548643470277, -4.864289415179469], [-7.292810926086492, -11.785158328197802, -7.484567284310206, -7.860675601366448], [-4.631548643470277, -7.484567284310206, -4.753330067643909, -4.992190499281962], [-4.864289415179469, -7.860675601366448, -4.992190499281962, -5.243053948802298]], [[-4.739665186661101, -7.659283260401616, -4.864289415179469, -5.108725684655301], [-7.659283260401616, -12.377376407972651, -7.860675601366448, -8.255683804118878], [-4.864289415179469, -7.860675601366448, -4.992190499281962, -5.243053948802298], [-5.108725684655301, -8.255683804118878, -5.243053948802298, -5.5065235819837515]]], [[[-2.7926339896239365, -4.512887287767106, -2.8660631967060146, -3.0100862463417126], [-4.512887287767106, -7.292810926086492, -4.631548643470277, -4.864289415179469], [-2.8660631967060146, -4.631548643470277, -2.9414231431806286, -3.089233118842289], [-3.0100862463417126, -4.864289415179469, -3.089233118842289, -3.2444707197865448]], [[-4.512887287767106, -7.292810926086492, -4.631548643470277, -4.864289415179469], [-7.292810926086492, -11.785158328197802, -7.484567284310206, -7.860675601366448], [-4.631548643470277, -7.484567284310206, -4.753330067643909, -4.992190499281962], [-4.864289415179469, -7.860675601366448, -4.992190499281962, -5.243053948802298]], [[-2.8660631967060146, -4.631548643470277, -2.9414231431806286, -3.089233118842289], [-4.631548643470277, -7.484567284310206, -4.753330067643909, -4.992190499281962], [-2.9414231431806286, -4.753330067643909, -3.018764595694322, -3.170461070393087], [-3.089233118842289, -4.992190499281962, -3.170461070393087, -3.3297804715263446]], [[-3.0100862463417126, -4.864289415179469, -3.089233118842289, -3.2444707197865448], [-4.864289415179469, -7.860675601366448, -4.992190499281962, -5.243053948802298], [-3.089233118842289, -4.992190499281962, -3.170461070393087, -3.3297804715263446], [-3.2444707197865448, -5.243053948802298, -3.3297804715263446, -3.4971058601213287]]], [[[-2.9329671351610633, -4.739665186661101, -3.0100862463417126, -3.161346623769138], [-4.739665186661101, -7.659283260401616, -4.864289415179469, -5.108725684655301], [-3.0100862463417126, -4.864289415179469, -3.089233118842289, -3.2444707197865448], [-3.161346623769138, -5.108725684655301, -3.2444707197865448, -3.4075091929278334]], [[-4.739665186661101, -7.659283260401616, -4.864289415179469, -5.108725684655301], [-7.659283260401616, -12.377376407972651, -7.860675601366448, -8.255683804118878], [-4.864289415179469, -7.860675601366448, -4.992190499281962, -5.243053948802298], [-5.108725684655301, -8.255683804118878, -5.243053948802298, -5.5065235819837515]], [[-3.0100862463417126, -4.864289415179469, -3.089233118842289, -3.2444707197865448], [-4.864289415179469, -7.860675601366448, -4.992190499281962, -5.243053948802298], [-3.089233118842289, -4.992190499281962, -3.170461070393087, -3.3297804715263446], [-3.2444707197865448, -5.243053948802298, -3.3297804715263446, -3.4971058601213287]], [[-3.161346623769138, -5.108725684655301, -3.2444707197865448, -3.4075091929278334], [-5.108725684655301, -8.255683804118878, -5.243053948802298, -5.5065235819837515], [-3.2444707197865448, -5.243053948802298, -3.3297804715263446, -3.4971058601213287], [-3.4075091929278334, -5.5065235819837515, -3.4971058601213287, -3.672839546472842]]]]
    d3Vis_Dortmund_dxixjxks_analytical = GE.d3Vis_Dortmund_dxixjxks()
    assert_allclose(d3Vis_Dortmund_dxixjxks_analytical, d3Vis_Dortmund_dxixjxks_sympy, rtol=1e-12)

    # psis
    psis_expect = [[1.0, 1.0, 0.6707604929520135, 0.035196695310572235, 0.2700092136237005, 1.140425934953746], [1.0, 1.0, 0.6707604929520135, 0.035196695310572235, 0.2700092136237005, 1.140425934953746], [1.2927014923654436, 1.2927014923654436, 1.0, 0.13639980946513558, 0.4791047146900759, 1.3703140538273264], [1.1046314487222453, 1.1046314487222453, 0.469691436026506, 1.0, 1.0619227299517133, 0.9326943648817854], [1.4015831210522953, 1.4015831210522953, 1.388780709384238, 0.4991964528404533, 1.0, 1.4462050689950563], [0.8750017310322578, 0.8750017310322578, 0.6029103149261912, 0.0345211225752076, 0.2468417790942161, 1.0]]
    psis_analytical = GE.psis()
    assert_allclose(psis_expect, psis_analytical, rtol=1e-12)
    
    
    # psis 1st T derivative
    def to_diff(T):
        return np.array(GE.to_T_xs(T, xs).psis()).ravel().tolist()
    dpsis_dT_numerical = np.array(derivative(to_diff, T, n=1, order=5, dx=T*4e-7, scalar=False)).reshape(6,6)
    dpsis_dT_expect = [[0.0, 0.0, 0.0005501317207598933, 0.000647367519092256, 0.0008408159966567053, 0.0001585324390412828], [0.0, 0.0, 0.0005501317207598933, 0.000647367519092256, 0.0008408159966567053, 0.0001585324390412828], [0.00014919258368395743, 0.00014919258368395743, 0.0, 0.002243244436897652, -0.0015269169402591476, -0.0007143860476337597], [0.01172661891603331, 0.01172661891603331, 0.0035449013241947796, 0.0, 0.004488270386007889, 0.007419012445749164], [0.002003111126252462, 0.002003111126252462, 0.0045855195246785364, 0.001865930344365094, 0.0, 0.0017469842072108397], [-5.567718366748017e-05, -5.567718366748017e-05, 0.0009273911445009344, 0.0008626432663807586, 0.0008234504937961999, 0.0]]
    dpsis_dT = GE.dpsis_dT()
    
    assert_allclose(dpsis_dT, dpsis_dT_expect, rtol=1e-12)
    assert_allclose(dpsis_dT, dpsis_dT_numerical, rtol=1e-9, atol=1e-12)
    
    # psis 2nd T derivative
    def to_diff(T):
        return np.array(GE.to_T_xs(T, xs).dpsis_dT()).ravel().tolist()
    d2psis_dT2_numerical = np.array(derivative(to_diff, T, n=1, order=5, dx=T*4e-7, scalar=False)).reshape(6,6)
    d2psis_dT2_expect = [[0.0, 0.0, -2.497385498809293e-06, 8.14459865464684e-06, -1.8882607026289393e-06, 5.162517426439307e-06], [0.0, 0.0, -2.497385498809293e-06, 8.14459865464684e-06, -1.8882607026289393e-06, 5.162517426439307e-06], [-7.824201278437826e-07, -7.824201278437826e-07, 0.0, 1.603797634138834e-05, 2.170083500037727e-06, -6.727347992871973e-06], [5.62004911546718e-05, 5.62004911546718e-05, -2.8370714993233295e-05, 0.0, 2.9189001336820514e-05, -5.303653672013689e-05], [-7.873423270360566e-06, -7.873423270360566e-06, 1.8216054771503098e-05, -5.578869568251919e-06, 0.0, -7.253123234576289e-06], [-5.752587724790159e-06, -5.752587724790159e-06, 1.487285599566105e-06, 1.8100217819471976e-05, -1.6665240719858701e-06, 0.0]]
    d2psis_dT2 = GE.d2psis_dT2()
    
    assert_allclose(d2psis_dT2, d2psis_dT2_expect, rtol=1e-12)
    assert_allclose(d2psis_dT2, d2psis_dT2_numerical, rtol=1e-9)

    # psis 3rd T derivative
    def to_diff(T):
        return np.array(GE.to_T_xs(T, xs).d2psis_dT2()).ravel().tolist()
    d3psis_dT3_numerical = np.array(derivative(to_diff, T, n=1, order=5, dx=T*4e-7, scalar=False)).reshape(6,6)
    d3psis_dT3_expect = [[0.0, 0.0, 1.682072114998335e-08, 4.165016652884307e-08, 2.2840705523955177e-09, -3.9180897581798757e-08], [0.0, 0.0, 1.682072114998335e-08, 4.165016652884307e-08, 2.2840705523955177e-09, -3.9180897581798757e-08], [6.153949633573174e-09, 6.153949633573174e-09, 0.0, -2.5452843203389944e-07, 3.1946609560190037e-08, 6.798965297821362e-08], [-3.0423941636258116e-07, -3.0423941636258116e-07, -6.030264891259016e-07, 0.0, 1.2759377454995282e-07, -1.3036091180326196e-06], [4.4375159106213954e-08, 4.4375159106213954e-08, 5.573000263673513e-08, -1.3773839133617482e-08, 0.0, 4.389562987455186e-08], [4.7375924278776154e-08, 4.7375924278776154e-08, 1.9860559592907367e-09, 3.0735539819699594e-07, 4.772477057976549e-10, 0.0]]
    d3psis_dT3 = GE.d3psis_dT3()
    
    assert_allclose(d3psis_dT3, d3psis_dT3_expect, rtol=1e-12)
    assert_allclose(d3psis_dT3, d3psis_dT3_numerical, rtol=4e-9)

    # lngammas combinatorial
    lngammas_c = GE.lngammas_c()
    lngammas_c_expect = [-0.01830902002060108, -0.009915329990301362, -0.01207311645273321, 0.030610555513890587]
    assert_allclose(lngammas_c, lngammas_c_expect, rtol=1e-12)
    
    def to_jac_lngammas_c(xs):
        return GE.to_T_xs(T, xs).lngammas_c()
    
    # lngammas combinatorial x derivative
    dlngammas_c_dxs_analytical = GE.dlngammas_c_dxs()
    dlngammas_c_dxs_expect = [[-0.14720169204015732, -0.23711219630542058, -0.1509362387874117, -0.15925421307962118], [0.2683935958787521, 0.3328254274584339, 0.25752473384564023, 0.36714416244020576], [-0.12935866673128182, -0.22640348628239915, -0.1358443244469728, -0.12603630669610544], [-0.09535468420616511, -0.07446210087051597, -0.08371434987878001, -0.16422193861631618]]
    assert_allclose(dlngammas_c_dxs_expect, dlngammas_c_dxs_analytical, rtol=1e-11)
    dlngammas_c_dxs_numerical = jacobian(to_jac_lngammas_c, xs, scalar=False, perturbation=1e-7)
    assert_allclose(dlngammas_c_dxs_analytical, dlngammas_c_dxs_numerical, rtol=1e-6)

    # lngammas combinatorial xixj derivatives
    d2lngammas_c_dxixjs = GE.d2lngammas_c_dxixjs()
    d2lngammas_c_dxixjs_numerical = np.array(hessian(to_jac_lngammas_c, xs, scalar=False, perturbation=1e-4)).T
    d2lngammas_c_dxixjs_analytical_sympy = [[[-0.431834610022220, -0.699005968004498, -0.443395964492912, -0.464561835915905], [-0.699005968004498, -1.05415684883700, -0.703959984354841, -0.811779652806081], [-0.443395964492912, -0.703959984354841, -0.452817910598213, -0.487641837829355], [-0.464561835915905, -0.811779652806081, -0.487641837829355, -0.453519975183815]], [[-1.11383953685822, -1.72452652362249, -1.12970114086422, -1.25891480362318], [-1.72452652362249, -2.46673321720012, -1.71610214156011, -2.08731980579672], [-1.12970114086422, -1.71610214156011, -1.14048618689678, -1.29897088552115], [-1.25891480362318, -2.08731980579672, -1.29897088552115, -1.33068993050655]], [[-0.461103182415314, -0.732574789932881, -0.470990720136454, -0.506727852440381], [-0.732574789932881, -1.07434727235270, -0.732917839925643, -0.870921749315069], [-0.470990720136454, -0.732917839925643, -0.478456264674908, -0.528878289507013], [-0.506727852440381, -0.870921749315069, -0.528878289507013, -0.508531084106759]], [[-0.516999750615383, -0.896519149468931, -0.541458549217459, -0.510041039673542], [-0.896519149468931, -1.50168962767411, -0.927046440399886, -0.940075844179167], [-0.541458549217459, -0.927046440399886, -0.564522191356871, -0.545966133985468], [-0.510041039673542, -0.940075844179167, -0.545966133985468, -0.448860503118729]]]
    assert_allclose(d2lngammas_c_dxixjs, d2lngammas_c_dxixjs_analytical_sympy, rtol=1e-12)
    assert_allclose(d2lngammas_c_dxixjs_numerical, d2lngammas_c_dxixjs, rtol=1e-3)
    
    # lngammas combinatorial xixjxk derivatives
    d3lngammas_c_dxixjxks_sympy = [[[[1.6157638281347313, 2.6137187048291146, 1.6587201153729827, 1.7395281480044291], [2.6137187048291146, 4.110995823528366, 2.6623381481448205, 2.904670949015034], [1.6587201153729827, 2.6623381481448205, 1.6990980164988494, 1.8019531515965868], [1.7395281480044291, 2.904670949015034, 1.8019531515965868, 1.80242048689384]], [[2.6137187048291146, 4.110995823528366, 2.6623381481448205, 2.904670949015034], [4.110995823528366, 6.160815002256778, 4.137938111790589, 4.7761520747739326], [2.6623381481448205, 4.137938111790589, 2.7038972231319587, 2.9919457629077058], [2.904670949015034, 4.7761520747739326, 2.9919457629077058, 3.08949331840945]], [[1.6587201153729827, 2.6623381481448205, 1.6990980164988494, 1.8019531515965868], [2.6623381481448205, 4.137938111790589, 2.7038972231319587, 2.9919457629077058], [1.6990980164988494, 2.7038972231319587, 1.7364673150844876, 1.862928127152595], [1.8019531515965868, 2.9919457629077058, 1.862928127152595, 1.8842209873970486]], [[1.7395281480044291, 2.904670949015034, 1.8019531515965868, 1.80242048689384], [2.904670949015034, 4.7761520747739326, 2.9919457629077058, 3.08949331840945], [1.8019531515965868, 2.9919457629077058, 1.862928127152595, 1.8842209873970486], [1.80242048689384, 3.08949331840945, 1.8842209873970486, 1.788495879565966]]], [[[3.294569023494623, 5.211247685889852, 3.3610906692568103, 3.6385366069018446], [5.211247685889852, 7.93881837163565, 5.26711987407594, 5.962076549915123], [3.3610906692568103, 5.26711987407594, 3.4210226652076683, 3.745107602665679], [3.6385366069018446, 5.962076549915123, 3.745107602665679, 3.880502427256209]], [[5.211247685889852, 7.93881837163565, 5.26711987407594, 5.962076549915123], [7.93881837163565, 11.313907501611073, 7.9056789654576125, 9.563376478050788], [5.26711987407594, 7.9056789654576125, 5.305998080087991, 6.096889237192718], [5.962076549915123, 9.563376478050788, 6.096889237192718, 6.5366482997368776]], [[3.3610906692568103, 5.26711987407594, 3.4210226652076683, 3.745107602665679], [5.26711987407594, 7.9056789654576125, 5.305998080087991, 6.096889237192718], [3.4210226652076683, 5.305998080087991, 3.473428161369257, 3.8473049351920636], [3.745107602665679, 6.096889237192718, 3.8473049351920636, 4.027391791992885]], [[3.6385366069018446, 5.962076549915123, 3.745107602665679, 3.880502427256209], [5.962076549915123, 9.563376478050788, 6.096889237192718, 6.5366482997368776], [3.745107602665679, 6.096889237192718, 3.8473049351920636, 4.027391791992885], [3.880502427256209, 6.5366482997368776, 4.027391791992885, 3.991668520970825]]], [[[1.687782288423389, 2.7093025236417194, 1.7289243470905367, 1.8332782904127969], [2.7093025236417194, 4.213832387211374, 2.752096474687314, 3.04256708359509], [1.7289243470905367, 2.752096474687314, 1.7670778958907294, 1.8950769256798736], [1.8332782904127969, 3.04256708359509, 1.8950769256798736, 1.9179853008967034]], [[2.7093025236417194, 4.213832387211374, 2.752096474687314, 3.04256708359509], [4.213832387211374, 6.203569871499487, 4.225015569357999, 4.9615860827389096], [2.752096474687314, 4.225015569357999, 2.7869133000998065, 3.1262918939613966], [3.04256708359509, 4.9615860827389096, 3.1262918939613966, 3.2701469966457783]], [[1.7289243470905367, 2.752096474687314, 1.7670778958907294, 1.8950769256798736], [2.752096474687314, 4.225015569357999, 2.7869133000998065, 3.1262918939613966], [1.7670778958907294, 2.7869133000998065, 1.8017756403803817, 1.9550672708058725], [1.8950769256798736, 3.1262918939613966, 1.9550672708058725, 2.000418970858349]], [[1.8332782904127969, 3.04256708359509, 1.8950769256798736, 1.9179853008967034], [3.04256708359509, 4.9615860827389096, 3.1262918939613966, 3.2701469966457783], [1.8950769256798736, 3.1262918939613966, 1.9550672708058725, 2.000418970858349], [1.9179853008967034, 3.2701469966457783, 2.000418970858349, 1.9256400463858483]]], [[[1.8255924726249153, 3.0437506128568153, 1.8902804419828647, 1.8951863276031244], [3.0437506128568153, 5.000904351395424, 3.134682371939994, 3.2394026100786686], [1.8902804419828647, 3.134682371939994, 1.953577885474481, 1.9794260027897586], [1.8951863276031244, 3.2394026100786686, 1.9794260027897586, 1.8884850590598838]], [[3.0437506128568153, 5.000904351395424, 3.134682371939994, 3.2394026100786686], [5.000904351395424, 8.010125385293254, 5.110444083939642, 5.500633116264876], [3.134682371939994, 5.110444083939642, 3.220829251438246, 3.3694349676276216], [3.2394026100786686, 5.500633116264876, 3.3694349676276216, 3.300648591617995]], [[1.8902804419828647, 3.134682371939994, 1.953577885474481, 1.9794260027897586], [3.134682371939994, 5.110444083939642, 3.220829251438246, 3.3694349676276216], [1.953577885474481, 3.220829251438246, 2.0151064483215024, 2.0634751877237676], [1.9794260027897586, 3.3694349676276216, 2.0634751877237676, 1.991864912380111]], [[1.8951863276031244, 3.2394026100786686, 1.9794260027897586, 1.8884850590598838], [3.2394026100786686, 5.500633116264876, 3.3694349676276216, 3.300648591617995], [1.9794260027897586, 3.3694349676276216, 2.0634751877237676, 1.991864912380111], [1.8884850590598838, 3.300648591617995, 1.991864912380111, 1.7868617457401452]]]]
    d3lngammas_c_dxixjxks_expct = [[[[1.6157638281347175, 2.613718704829054, 1.6587201153729723, 1.7395281480044034], [2.6137187048290684, 4.11099582352827, 2.662338148144798, 2.904670949014971], [1.658720115372958, 2.6623381481447836, 1.6990980164988514, 1.801953151596571], [1.7395281480044034, 2.904670949014985, 1.801953151596578, 1.8024204868938298]], [[2.613718704829097, 4.11099582352827, 2.6623381481447836, 2.904670949014971], [4.110995823528327, 6.160815002256527, 4.137938111790561, 4.7761520747739326], [2.6623381481448263, 4.137938111790447, 2.703897223131932, 2.991945762907676], [2.904670949014971, 4.776152074773847, 2.991945762907662, 3.089493318409396]], [[1.6587201153729723, 2.6623381481447552, 1.699098016498823, 1.801953151596571], [2.662338148144798, 4.137938111790504, 2.703897223131932, 2.991945762907676], [1.69909801649883, 2.703897223131989, 1.736467315084461, 1.8629281271525713], [1.801953151596571, 2.991945762907662, 1.8629281271525713, 1.8842209873970432]], [[1.7395281480044034, 2.904670949014985, 1.801953151596578, 1.8024204868938298], [2.9046709490150278, 4.776152074773847, 2.991945762907662, 3.089493318409424], [1.8019531515965994, 2.991945762907662, 1.8629281271525713, 1.884220987397029], [1.8024204868938298, 3.089493318409424, 1.884220987397022, 1.788495879565943]]], [[[3.294569023494617, 5.2112476858899015, 3.361090669256754, 3.638536606901809], [5.2112476858899015, 7.938818371635534, 5.267119874075888, 5.9620765499151105], [3.3610906692567255, 5.267119874075945, 3.4210226652076443, 3.7451076026656835], [3.638536606901752, 5.962076549915167, 3.745107602665655, 3.880502427256218]], [[5.21124768588993, 7.938818371635591, 5.267119874075917, 5.962076549915139], [7.9388183716356195, 11.31390750161097, 7.9056789654575255, 9.563376478050714], [5.267119874075945, 7.905678965457696, 5.30599808008796, 6.096889237192755], [5.962076549915196, 9.56337647805077, 6.09688923719267, 6.536648299736697]], [[3.3610906692567255, 5.267119874075945, 3.4210226652076443, 3.745107602665655], [5.267119874075945, 7.905678965457696, 5.30599808008796, 6.096889237192755], [3.4210226652076443, 5.305998080087932, 3.4734281613692275, 3.8473049351920565], [3.7451076026656693, 6.096889237192755, 3.8473049351919997, 4.027391791992855]], [[3.638536606901752, 5.962076549915167, 3.745107602665655, 3.8805024272561894], [5.9620765499151105, 9.563376478050657, 6.09688923719267, 6.536648299736811], [3.745107602665641, 6.096889237192755, 3.8473049351919997, 4.027391791992855], [3.880502427256218, 6.536648299736811, 4.027391791992869, 3.991668520970805]]], [[[1.6877822884233638, 2.709302523641668, 1.7289243470905333, 1.8332782904127853], [2.7093025236416537, 4.213832387211198, 2.752096474687349, 3.042567083595088], [1.7289243470905333, 2.7520964746873346, 1.7670778958906936, 1.8950769256798665], [1.8332782904127853, 3.042567083595088, 1.8950769256798665, 1.9179853008966603]], [[2.709302523641682, 4.213832387211198, 2.752096474687349, 3.042567083595088], [4.213832387211227, 6.203569871499269, 4.2250155693579075, 4.961586082738876], [2.7520964746873346, 4.225015569357851, 2.7869133000997977, 3.1262918939613797], [3.042567083595088, 4.961586082738876, 3.126291893961323, 3.2701469966457637]], [[1.7289243470905191, 2.7520964746873062, 1.7670778958906652, 1.8950769256798878], [2.752096474687363, 4.2250155693579075, 2.7869133000997977, 3.126291893961323], [1.7670778958906936, 2.786913300099755, 1.801775640380363, 1.9550672708058912], [1.8950769256798736, 3.1262918939613797, 1.955067270805884, 2.000418970858334]], [[1.8332782904127995, 3.042567083595088, 1.8950769256798665, 1.9179853008966603], [3.042567083595145, 4.961586082738876, 3.126291893961323, 3.2701469966457637], [1.8950769256798665, 3.1262918939613797, 1.955067270805877, 2.0004189708583056], [1.9179853008966674, 3.2701469966457637, 2.000418970858341, 1.9256400463858583]]], [[[1.825592472624912, 3.043750612856769, 1.8902804419828954, 1.8951863276030991], [3.043750612856769, 5.00090435139532, 3.1346823719399595, 3.2394026100787414], [1.890280441982867, 3.1346823719399595, 1.9535778854744663, 1.979426002789772], [1.8951863276030991, 3.2394026100786846, 1.9794260027897863, 1.8884850590598674]], [[3.043750612856769, 5.00090435139532, 3.1346823719399595, 3.239402610078713], [5.0009043513954055, 8.010125385292952, 5.110444083939512, 5.500633116264908], [3.1346823719399737, 5.110444083939512, 3.220829251438275, 3.3694349676275976], [3.239402610078699, 5.500633116264993, 3.369434967627683, 3.300648591617957]], [[1.8902804419828954, 3.134682371939988, 1.9535778854744663, 1.9794260027897863], [3.1346823719399737, 5.110444083939512, 3.2208292514382464, 3.369434967627626], [1.9535778854744663, 3.220829251438232, 2.0151064483215038, 2.063475187723782], [1.979426002789765, 3.369434967627626, 2.063475187723789, 1.991864912380116]], [[1.8951863276030991, 3.239402610078713, 1.979426002789772, 1.8884850590598674], [3.2394026100786846, 5.5006331162647655, 3.3694349676276403, 3.3006485916179855], [1.979426002789765, 3.369434967627569, 2.063475187723789, 1.991864912380116], [1.8884850590598603, 3.300648591617957, 1.991864912380123, 1.78686174574014]]]]
    d3lngammas_c_dxixjxks = GE.d3lngammas_c_dxixjxks()
    assert_allclose(d3lngammas_c_dxixjxks, d3lngammas_c_dxixjxks_sympy, rtol=1e-12)
    assert_allclose(d3lngammas_c_dxixjxks, d3lngammas_c_dxixjxks_expct, rtol=1e-12)
    
    # Residual - basic parts

    Xs_pure_expect = [[0.0, 0.0, 0.5, 0.3333333333333333], 
                      [0.0, 0.0, 0.0, 0.3333333333333333],
                      [1.0, 0.0, 0.0, 0.0],
                      [0.0, 0.0, 0.0, 0.3333333333333333],
                      [0.0, 0.0, 0.5, 0.0],
                      [0.0, 1.0, 0.0, 0.0]]
    assert_allclose(GE.Xs_pure(), Xs_pure_expect, rtol=1e-12)
    
    Xs_expect = [0.11363636363636363, 0.09090909090909091, 0.27272727272727276, 0.09090909090909091, 0.022727272727272728, 0.40909090909090906]
    assert_allclose(Xs_expect, GE.Xs(), rtol=1e-12)
    
    Thetas_expect = [0.1555178945269664, 0.08304843221308064, 0.15203457516991448, 0.10469896262761912, 0.048965852914787694, 0.4557342825476318]
    assert_allclose(GE.Thetas(), Thetas_expect, rtol=1e-12)
    
    Thetas_pure_expect = [[0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
     [0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
     [0.3884575948440017, 0.0, 0.0, 0.0, 0.6115424051559982, 0.0],
     [0.3985572587917043, 0.2660429816651638, 0.0, 0.335399759543132, 0.0, 0.0]]
    assert_allclose(GE.Thetas_pure(), Thetas_pure_expect, rtol=1e-12)
    
    
    lnGammas_subgroups_pure_expect = [[0.0, 0.0, 0.2525211912149972, 0.30820317547330855],
     [0.0, 0.0, 0.0, 0.20573026824344812],
     [0.0, 0.0, 0.0, 0.0],
     [0.0, 0.0, 0.0, 0.3400841900068883],
     [0.0, 0.0, 0.07142530517046565, 0.0],
     [0.0, 0.0, 0.0, 0.0]]
    assert_allclose(GE.lnGammas_subgroups_pure(), lnGammas_subgroups_pure_expect, rtol=1e-12)
    
    lnGammas_subgroups_expect = [0.08369133966599032, 0.055865231539864016, 0.05507425302818821, 1.1382224417102726, 0.4125412676822281, 0.08846629261844947]
    assert_allclose(lnGammas_subgroups_expect, GE.lnGammas_subgroups(), rtol=1e-12)
    
    lngammas_r_expect = [0.33044551816912926, 0.5307977557106969, 0.17228611096275556, 0.423761379192482]
    assert_allclose(lngammas_r_expect, GE.lngammas_r(), rtol=1e-12)
    
    assert_allclose(GE.GE(), 1292.0910446403336)
    
    gammas_expect = [1.366341183343183, 1.6835125692286341, 1.1737608489858082, 1.5751837540437106]
    assert_allclose(GE.gammas(), gammas_expect, rtol=1e-12)

    dlnGammas_subgroups_dT_numerical = [i[0] for i in jacobian(lambda T: GE.to_T_xs(T=T[0], xs=GE.xs).lnGammas_subgroups(), [GE.T], scalar=False, perturbation=1e-8)]
    assert_allclose(dlnGammas_subgroups_dT_numerical, GE.dlnGammas_subgroups_dT(), rtol=5e-7)
    dlnGammas_subgroups_dT_expect = [-0.0009677119301191769, -0.0006459623093112642, -0.00035140582140865084, -0.00743085779040337, -0.003365551965236213, -0.000493060082455736]
    assert_allclose(dlnGammas_subgroups_dT_expect, GE.dlnGammas_subgroups_dT(), rtol=1e-12)
    
    d2lnGammas_subgroups_dT2_numerical = [i[0] for i in jacobian(lambda T: GE.to_T_xs(T=T[0], xs=GE.xs).dlnGammas_subgroups_dT(), [GE.T], scalar=False, perturbation=1e-8)]
    d2lnGammas_subgroups_dT2_expect = [-6.5673147545536255e-06, -4.3837816531857294e-06, 3.331409426621567e-06, -9.761393674713978e-06, 2.7776341731692812e-05, -6.963348655067715e-07]
    d2lnGammas_subgroups_dT2 = GE.d2lnGammas_subgroups_dT2()
    assert_allclose(d2lnGammas_subgroups_dT2, d2lnGammas_subgroups_dT2_expect, rtol=1e-12)
    assert_allclose(d2lnGammas_subgroups_dT2, d2lnGammas_subgroups_dT2_numerical, rtol=1e-6)
    
    d3lnGammas_subgroups_dT3_numerical = [i[0] for i in jacobian(lambda T: GE.to_T_xs(T=T[0], xs=GE.xs).d2lnGammas_subgroups_dT2(), [GE.T], scalar=False, perturbation=1e-8)]
    d3lnGammas_subgroups_dT3 = GE.d3lnGammas_subgroups_dT3()
    d3lnGammas_subgroups_dT3_expect = [2.292547993512055e-08, 1.5303103640704054e-08, 1.0888701309841477e-07, 3.433594317292919e-07, -6.694401804755741e-07, 3.2918869996009466e-08]
    assert_allclose(d3lnGammas_subgroups_dT3, d3lnGammas_subgroups_dT3_expect, rtol=1e-12)
    assert_allclose(d3lnGammas_subgroups_dT3, d3lnGammas_subgroups_dT3_numerical, rtol=1e-6)

    dlnGammas_subgroups_pure_dT_expect = [[0.0, 0.0, -0.0013677908855988523, -0.002042849755954296],
     [0.0, 0.0, 0.0, -0.001363633024313006],
     [0.0, 0.0, 0.0, 0.0],
     [0.0, 0.0, 0.0, -0.004385381381959583],
     [0.0, 0.0, -0.0004368227607265967, 0.0],
     [0.0, 0.0, 0.0, 0.0]]
    
    dlnGammas_subgroups_pure_dT_numerical = [[i[0] for i in jacobian(lambda T: GE.to_T_xs(T=T[0], xs=GE.xs).lnGammas_subgroups_pure()[j], [GE.T], scalar=False, perturbation=1e-8)] for j in range(6)]
    dlnGammas_subgroups_pure_dT = GE.dlnGammas_subgroups_pure_dT()
    assert_allclose(dlnGammas_subgroups_pure_dT, dlnGammas_subgroups_pure_dT_expect, rtol=1e-12)
    assert_allclose(dlnGammas_subgroups_pure_dT_numerical, dlnGammas_subgroups_pure_dT, rtol=1e-6)
    
    d2lnGammas_subgroups_pure_dT2_expect = [[0.0, 0.0, 5.259889238911016e-06, -1.7377017617239823e-05],
      [0.0, 0.0, 0.0, -1.1599421356304221e-05],
      [-0.0, 0.0, 0.0, 0.0],
      [0.0, 0.0, 0.0, 1.0119388945730533e-05],
      [0.0, 0.0, 1.923660010004082e-06, 0.0],
      [0.0, -0.0, 0.0, 0.0]]
    d2lnGammas_subgroups_pure_dT2_numerical = [[i[0] for i in jacobian(lambda T: GE.to_T_xs(T=T[0], xs=GE.xs).dlnGammas_subgroups_pure_dT()[j], [GE.T], scalar=False, perturbation=3e-7)] for j in range(6)]
    d2lnGammas_subgroups_pure_dT2 = GE.d2lnGammas_subgroups_pure_dT2()
    assert_allclose(d2lnGammas_subgroups_pure_dT2, d2lnGammas_subgroups_pure_dT2_expect, rtol=1e-12)
    assert_allclose(d2lnGammas_subgroups_pure_dT2, d2lnGammas_subgroups_pure_dT2_numerical, rtol=1e-5)
    
    d3lnGammas_subgroups_pure_dT3_expect = [[0.0, 0.0, -2.7154094696008944e-08, 9.320074307198575e-08],
     [0.0, 0.0, 0.0, 6.221290174328159e-08],
     [0.0, 0.0, 0.0, 0.0],
     [0.0, 0.0, 0.0, 1.6857904176843558e-07],
     [0.0, 0.0, -1.4797079241774134e-08, 0.0],
     [0.0, 0.0, 0.0, 0.0]]
    d3lnGammas_subgroups_pure_dT3_numerical = [[i[0] for i in jacobian(lambda T: GE.to_T_xs(T=T[0], xs=GE.xs).d2lnGammas_subgroups_pure_dT2()[j], [GE.T], scalar=False, perturbation=3e-8)] for j in range(6)]
    d3lnGammas_subgroups_pure_dT3 = GE.d3lnGammas_subgroups_pure_dT3()
    assert_allclose(d3lnGammas_subgroups_pure_dT3, d3lnGammas_subgroups_pure_dT3_expect, rtol=1e-12)
    assert_allclose(d3lnGammas_subgroups_pure_dT3_numerical, d3lnGammas_subgroups_pure_dT3, rtol=1e-6)
    
    
    
    
    
