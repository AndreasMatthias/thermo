# -*- coding: utf-8 -*-
'''Chemical Engineering Design Library (ChEDL). Utilities for process modeling.
Copyright (C) 2016, Caleb Bell <Caleb.Andrew.Bell@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'''

from __future__ import division

__all__ = ['Poling_data', 'TRC_gas_data', '_PerryI', 'CRC_standard_data', 
           'Lastovka_Shaw', 'Lastovka_Shaw_integral', 'TRCCp', 
           'TRCCp_integral', 'TRCCp_integral_over_T', 
           'heat_capacity_gas_methods', 'HeatCapacityGas', 
           'Rowlinson_Poling', 'Rowlinson_Bondi', 'Dadgostar_Shaw', 
           'Zabransky_quasi_polynomial', 'Zabransky_cubic', 
           'ZABRANSKY_TO_DICT', 'heat_capacity_liquid_methods', 
           'HeatCapacityLiquid', 'Lastovka_solid', 'Lastovka_solid_integral', 
           'Lastovka_solid_integral_over_T', 'heat_capacity_solid_methods', 
           'HeatCapacitySolid', 'Cp_liq_mixture', 'Cp_gas_mixture', 
           'Cv_gas_mixture']
import os
from io import open
from thermo.utils import log, exp
import numpy as np
import pandas as pd

from scipy.constants import R, calorie
from scipy.integrate import quad

from thermo.utils import (to_num, property_molar_to_mass, none_and_length_check,
                          mixing_simple, property_mass_to_molar)
from thermo.miscdata import _VDISaturationDict, VDI_tabular_data
from thermo.electrochem import (Laliberte_heat_capacity,
                                _Laliberte_Heat_Capacity_ParametersDict)
from thermo.utils import TDependentProperty
from thermo.coolprop import *


folder = os.path.join(os.path.dirname(__file__), 'Heat Capacity')


Poling_data = pd.read_csv(os.path.join(folder,
                       'PolingDatabank.csv'), sep='\t',
                       index_col=0)
_Poling_data_values = Poling_data.values


TRC_gas_data = pd.read_csv(os.path.join(folder,
                       'TRC Thermodynamics of Organic Compounds in the Gas State.csv'), sep='\t',
                       index_col=0)
_TRC_gas_data_values = TRC_gas_data.values



_PerryI = {}
with open(os.path.join(folder, 'Perrys Table 2-151.csv'), encoding='utf-8') as f:
    '''Read in a dict of heat capacities of irnorganic and elemental solids.
    These are in section 2, table 151 in:
    Green, Don, and Robert Perry. Perry's Chemical Engineers' Handbook,
    Eighth Edition. McGraw-Hill Professional, 2007.

    Formula:
    Cp(Cal/mol/K) = Const + Lin*T + Quadinv/T^2 + Quadinv*T^2

    Phases: c, gls, l, g.
    '''
    next(f)
    for line in f:
        values = to_num(line.strip('\n').split('\t'))
        (CASRN, _formula, _phase, _subphase, Const, Lin, Quadinv, Quad, Tmin,
         Tmax, err) = values
        if Lin is None:
            Lin = 0
        if Quadinv is None:
            Quadinv = 0
        if Quad is None:
            Quad = 0
        if CASRN in _PerryI and CASRN:
            a = _PerryI[CASRN]
            a.update({_phase: {"Formula": _formula, "Phase": _phase,
                               "Subphase": _subphase, "Const": Const,
                               "Lin": Lin, "Quadinv": Quadinv, "Quad": Quad,
                               "Tmin": Tmin, "Tmax": Tmax, "Error": err}})
            _PerryI[CASRN] = a
        else:
            _PerryI[CASRN] = {_phase: {"Formula": _formula, "Phase": _phase,
                                       "Subphase": _subphase, "Const": Const,
                                       "Lin": Lin, "Quadinv": Quadinv,
                                       "Quad": Quad, "Tmin": Tmin,
                                       "Tmax": Tmax, "Error": err}}


#    '''Read in a dict of 2481 thermodynamic property sets of different phases from:
#        Haynes, W.M., Thomas J. Bruno, and David R. Lide. CRC Handbook of
#        Chemistry and Physics. [Boca Raton, FL]: CRC press, 2014.
#        Warning: 11 duplicated chemicals are present and currently clobbered.
CRC_standard_data = pd.read_csv(os.path.join(folder,
                       'CRC Standard Thermodynamic Properties of Chemical Substances.csv'), sep='\t',
                       index_col=0)



### Heat capacities of gases

def Lastovka_Shaw(T, similarity_variable, cyclic_aliphatic=False, order=0):
    r'''Calculate ideal-gas constant-pressure heat capacitiy with the similarity
    variable concept and method as shown in [1]_.

    .. math::
        C_p^0 = \left(A_2 + \frac{A_1 - A_2}{1 + \exp(\alpha-A_3/A_4)}\right)
        + (B_{11} + B_{12}\alpha)\left(-\frac{(C_{11} + C_{12}\alpha)}{T}\right)^2
        \frac{\exp(-(C_{11} + C_{12}\alpha)/T)}{[1-\exp(-(C_{11}+C_{12}\alpha)/T)]^2}\\
        + (B_{21} + B_{22}\alpha)\left(-\frac{(C_{21} + C_{22}\alpha)}{T}\right)^2
        \frac{\exp(-(C_{21} + C_{22}\alpha)/T)}{[1-\exp(-(C_{21}+C_{22}\alpha)/T)]^2}

    Parameters
    ----------
    T : float
        Temperature of gas [K]
    similarity_variable : float
        similarity variable as defined in [1]_, [mol/g]

    Returns
    -------
    Cpg : float
        Gas constant-pressure heat capacitiy, [J/kg/K]

    Notes
    -----
    Original model is in terms of J/g/K. Note that the model is for predicting
    mass heat capacity, not molar heat capacity like most other methods!

    A1 = 0.58, A2 = 1.25, A3 = 0.17338003, A4 = 0.014, B11 = 0.73917383,
    B12 = 8.88308889, C11 = 1188.28051, C12 = 1813.04613, B21 = 0.0483019,
    B22 = 4.35656721, C21 = 2897.01927, C22 = 5987.80407.

    Examples
    --------
    >>> Lastovka_Shaw(1000.0, 0.1333)
    2467.113309084757

    References
    ----------
    .. [1] Lastovka, Vaclav, and John M. Shaw. "Predictive Correlations for
       Ideal Gas Heat Capacities of Pure Hydrocarbons and Petroleum Fractions."
       Fluid Phase Equilibria 356 (October 25, 2013): 338-370.
       doi:10.1016/j.fluid.2013.07.023.
    '''
    a = similarity_variable
    if cyclic_aliphatic:
        A1 = -0.1793547
        A2 = 3.86944439
        first = A1 + A2*a
    else:
        A1 = 0.58
        A2 = 1.25
        A3 = 0.17338003 # 803 instead of 8003 in another paper
        A4 = 0.014
        first = A2 + (A1-A2)/(1+exp((a-A3)/A4)) # One reference says exp((a-A3)/A4)
        # Personal communication confirms the change

    B11 = 0.73917383
    B12 = 8.88308889
    C11 = 1188.28051
    C12 = 1813.04613
    B21 = 0.0483019
    B22 = 4.35656721
    C21 = 2897.01927
    C22 = 5987.80407
    Cp = first + (B11 + B12*a)*(-(C11+C12*a)/T)**2*exp(-(C11 + C12*a)/T)/(1-exp(-(C11+C12*a)/T))**2
    Cp += (B21 + B22*a)*(-(C21+C22*a)/T)**2*exp(-(C21 + C22*a)/T)/(1-exp(-(C21+C22*a)/T))**2
    Cp = Cp*1000 # J/g/K to J/kg/K
    return Cp


def Lastovka_Shaw_integral(T, similarity_variable, cyclic_aliphatic=False):
    r'''Calculate the integral of ideal-gas constant-pressure heat capacitiy 
    with the similarity variable concept and method as shown in [1]_.

    Parameters
    ----------
    T : float
        Temperature of gas [K]
    similarity_variable : float
        similarity variable as defined in [1]_, [mol/g]

    Returns
    -------
    H : float
        Difference in enthalpy from 0 K, [J/kg]

    Notes
    -----
    Original model is in terms of J/g/K. Note that the model is for predicting
    mass heat capacity, not molar heat capacity like most other methods!
    Integral was computed with SymPy.

    See Also
    --------
    Lastovka_Shaw_integral

    Examples
    --------
    >>> Lastovka_Shaw_integral(300.0, 0.1333)
    5283095.816018478

    References
    ----------
    .. [1] Lastovka, Vaclav, and John M. Shaw. "Predictive Correlations for
       Ideal Gas Heat Capacities of Pure Hydrocarbons and Petroleum Fractions."
       Fluid Phase Equilibria 356 (October 25, 2013): 338-370.
       doi:10.1016/j.fluid.2013.07.023.
    '''
    a = similarity_variable
    if cyclic_aliphatic:
        A1 = -0.1793547
        A2 = 3.86944439
        first = A1 + A2*a
    else:
        A1 = 0.58
        A2 = 1.25
        A3 = 0.17338003 # 803 instead of 8003 in another paper
        A4 = 0.014
        first = A2 + (A1-A2)/(1.+exp((a-A3)/A4)) # One reference says exp((a-A3)/A4)
        # Personal communication confirms the change

    B11 = 0.73917383
    B12 = 8.88308889
    C11 = 1188.28051
    C12 = 1813.04613
    B21 = 0.0483019
    B22 = 4.35656721
    C21 = 2897.01927
    C22 = 5987.80407
    return 1000.*(T*first - (B11 + B12*a)*(-C11 - C12*a)**2/(-C11 - C12*a + (C11 
    + C12*a)*exp((-C11 - C12*a)/T)) - (B21 + B22*a)*(-C21 - C22*a)**2/(-C21 
    - C22*a + (C21 + C22*a)*exp((-C21 - C22*a)/T)))


def TRCCp(T, a0, a1, a2, a3, a4, a5, a6, a7):
    r'''Calculates ideal gas heat capacity using the model developed in [1]_.

    The ideal gas heat capacity is given by:

    .. math::
        C_p = R\left(a_0 + (a_1/T^2) \exp(-a_2/T) + a_3 y^2
        + (a_4 - a_5/(T-a_7)^2 )y^j \right)

        y = \frac{T-a_7}{T+a_6} \text{ for } T > a_7 \text{ otherwise } 0

    Parameters
    ----------
    T : float
        Temperature [K]
    a1-a7 : float
        Coefficients

    Returns
    -------
    Cp : float
        Ideal gas heat capacity , [J/mol/K]

    Notes
    -----
    j is set to 8. Analytical integrals are available for this expression.

    Examples
    --------
    >>> TRCCp(300, 4.0, 7.65E5, 720., 3.565, -0.052, -1.55E6, 52., 201.)
    42.06525682312236

    References
    ----------
    .. [1] Kabo, G. J., and G. N. Roganov. Thermodynamics of Organic Compounds
       in the Gas State, Volume II: V. 2. College Station, Tex: CRC Press, 1994.
    '''
    if T <= a7:
        y = 0.
    else:
        y = (T - a7)/(T + a6)
    Cp = R*(a0 + (a1/T**2)*exp(-a2/T) + a3*y**2 + (a4 - a5/(T-a7)**2 )*y**8.)
    return Cp


def TRCCp_integral(T, a0, a1, a2, a3, a4, a5, a6, a7, I=0):
    r'''Integrates ideal gas heat capacity using the model developed in [1]_.
    Best used as a delta only.

    The difference in enthalpy with respect to 0 K is given by:

    .. math::
        \frac{H(T) - H^{ref}}{RT} = a_0 + a_1x(a_2)/(a_2T) + I/T + h(T)/T
        
        h(T) = (a_5 + a_7)\left[(2a_3 + 8a_4)\ln(1-y)+ \left\{a_3\left(1 + 
        \frac{1}{1-y}\right) + a_4\left(7 + \frac{1}{1-y}\right)\right\}y
        + a_4\left\{3y^2 + (5/3)y^3 + y^4 + (3/5)y^5 + (1/3)y^6\right\} 
        + (1/7)\left\{a_4 - \frac{a_5}{(a_6+a_7)^2}\right\}y^7\right]
        
        h(T) = 0 \text{ for } T \le a_7

        y = \frac{T-a_7}{T+a_6} \text{ for } T > a_7 \text{ otherwise } 0

    Parameters
    ----------
    T : float
        Temperature [K]
    a1-a7 : float
        Coefficients
    I : float, optional
        Integral offset

    Returns
    -------
    H-H(0) : float
        Difference in enthalpy from 0 K , [J/mol]

    Notes
    -----
    Analytical integral as provided in [1]_ and verified with numerical
    integration. 

    Examples
    --------
    >>> TRCCp_integral(298.15, 4.0, 7.65E5, 720., 3.565, -0.052, -1.55E6, 52., 
    ... 201., 1.2)
    10802.532600592816
    
    References
    ----------
    .. [1] Kabo, G. J., and G. N. Roganov. Thermodynamics of Organic Compounds
       in the Gas State, Volume II: V. 2. College Station, Tex: CRC Press, 1994.
    '''
    if T <= a7:
        y = 0.
    else:
        y = (T - a7)/(T + a6)
    y2 = y*y
    y4 = y2*y2
    if T <= a7:
        h = 0.0
    else:
        first = a6 + a7
        second = (2.*a3 + 8.*a4)*log(1. - y)
        third = (a3*(1. + 1./(1. - y)) + a4*(7. + 1./(1. - y)))*y
        fourth = a4*(3.*y2 + 5./3.*y*y2 + y4 + 0.6*y4*y + 1/3.*y4*y2)
        fifth = 1/7.*(a4 - a5/((a6 + a7)**2))*y4*y2*y
        h = first*(second + third + fourth + fifth)
    return (a0 + a1*exp(-a2/T)/(a2*T) + I/T + h/T)*R*T


def TRCCp_integral_over_T(T, a0, a1, a2, a3, a4, a5, a6, a7, J=0):
    if T <= a7:
        y = 0.
    else:
        y = (T - a7)/(T + a6)

    z = T/(T + a6)*(a7 + a6)/a7
    if T <= a7:
        s = 0.
    else:
#        first = (a3 + ((a4*a7**2 - a5)/a6**2)*(a7/a6)**4)*(a7/a6)**2*log(z)
#        second = (a3 + a4)*log((T + a6)/(a6 + a7))
#        fourth = -(a3/a6*(a6 + a7) + a5*y**6/(7*a7*(a6 + a7)))*y
#        third = sum([((a4*a7**2 - a5)/a6**2*(-a7/a6)**(5-i) - a4 )*y**i/i 
#                     for i in range(1, 8)])
        x1 = a4*((2940*T**6*a6 + 13230*T**5*a6**2 + 26950*T**4*a6**3 + 30625*T**3*a6**4 + 20139*T**2*a6**5 + 7203*T*a6**6 + 1089*a6**7)/(420*T**7 + 2940*T**6*a6 + 8820*T**5*a6**2 + 14700*T**4*a6**3 + 14700*T**3*a6**4 + 8820*T**2*a6**5 + 2940*T*a6**6 + 420*a6**7) + log(T + a6))
        x2 = a4*a7**8*((420*T**6 + 2730*T**5*a6 + 7490*T**4*a6**2 + 11165*T**3*a6**3 + 9639*T**2*a6**4 + 4683*T*a6**5 + 1089*a6**6)/(420*T**7*a6**7 + 2940*T**6*a6**8 + 8820*T**5*a6**9 + 14700*T**4*a6**10 + 14700*T**3*a6**11 + 8820*T**2*a6**12 + 2940*T*a6**13 + 420*a6**14) + (log(T) - log(T + a6))/a6**8)
        x3 = -a5*(a7**6*(7*a6 - a7)*log(T + (-a6**10*a7**6*(7*a6 - a7)/(a6 + a7)**9 - 10*a6**9*a7**7*(7*a6 - a7)/(a6 + a7)**9 - 45*a6**8*a7**8*(7*a6 - a7)/(a6 + a7)**9 - 120*a6**7*a7**9*(7*a6 - a7)/(a6 + a7)**9 - 210*a6**6*a7**10*(7*a6 - a7)/(a6 + a7)**9 - 252*a6**5*a7**11*(7*a6 - a7)/(a6 + a7)**9 - 210*a6**4*a7**12*(7*a6 - a7)/(a6 + a7)**9 - 120*a6**3*a7**13*(7*a6 - a7)/(a6 + a7)**9 - 45*a6**2*a7**14*(7*a6 - a7)/(a6 + a7)**9 + 7*a6**2*a7**6 - 10*a6*a7**15*(7*a6 - a7)/(a6 + a7)**9 - 8*a6*a7**7 - a7**16*(7*a6 - a7)/(a6 + a7)**9 + a7**8)/(14*a6*a7**6 - 2*a7**7))/(a6 + a7)**9 - a7**6*(7*a6 - a7)*log(T + (a6**10*a7**6*(7*a6 - a7)/(a6 + a7)**9 + 10*a6**9*a7**7*(7*a6 - a7)/(a6 + a7)**9 + 45*a6**8*a7**8*(7*a6 - a7)/(a6 + a7)**9 + 120*a6**7*a7**9*(7*a6 - a7)/(a6 + a7)**9 + 210*a6**6*a7**10*(7*a6 - a7)/(a6 + a7)**9 + 252*a6**5*a7**11*(7*a6 - a7)/(a6 + a7)**9 + 210*a6**4*a7**12*(7*a6 - a7)/(a6 + a7)**9 + 120*a6**3*a7**13*(7*a6 - a7)/(a6 + a7)**9 + 45*a6**2*a7**14*(7*a6 - a7)/(a6 + a7)**9 + 7*a6**2*a7**6 + 10*a6*a7**15*(7*a6 - a7)/(a6 + a7)**9 - 8*a6*a7**7 + a7**16*(7*a6 - a7)/(a6 + a7)**9 + a7**8)/(14*a6*a7**6 - 2*a7**7))/(a6 + a7)**9 + (T**7*(2940*a6*a7**6 - 420*a7**7) + T**6*(-210*a6**8 - 1680*a6**7*a7 - 5880*a6**6*a7**2 - 11760*a6**5*a7**3 - 14700*a6**4*a7**4 - 11760*a6**3*a7**5 + 13230*a6**2*a7**6 - 5880*a6*a7**7) + T**5*(-350*a6**9 - 2870*a6**8*a7 - 10360*a6**7*a7**2 - 21560*a6**6*a7**3 - 28420*a6**5*a7**4 - 24500*a6**4*a7**5 + 38710*a6**3*a7**6 - 22050*a6**2*a7**7) + T**4*(-350*a6**10 - 2730*a6**9*a7 - 9275*a6**8*a7**2 - 17920*a6**7*a7**3 - 21560*a6**6*a7**4 - 16660*a6**5*a7**5 + 69825*a6**4*a7**6 - 41650*a6**3*a7**7) + T**3*(-210*a6**11 - 1498*a6**10*a7 - 4333*a6**9*a7**2 - 5957*a6**8*a7**3 - 2128*a6**7*a7**4 + 5488*a6**6*a7**5 + 76979*a6**5*a7**6 - 45325*a6**4*a7**7) + T**2*(-70*a6**12 - 406*a6**11*a7 - 623*a6**10*a7**2 + 1309*a6**9*a7**3 + 7266*a6**8*a7**4 + 14784*a6**7*a7**5 + 50715*a6**6*a7**6 - 28959*a6**5*a7**7) + T*(-10*a6**13 - 18*a6**12*a7 + 263*a6**11*a7**2 + 1599*a6**10*a7**3 + 4526*a6**9*a7**4 + 8214*a6**8*a7**5 + 18393*a6**7*a7**6 - 10143*a6**6*a7**7) + 10*a6**13*a7 + 88*a6**12*a7**2 + 353*a6**11*a7**3 + 872*a6**10*a7**4 + 1578*a6**9*a7**5 + 2832*a6**8*a7**6 - 1509*a6**7*a7**7)/(T**8*(420*a6**8 + 3360*a6**7*a7 + 11760*a6**6*a7**2 + 23520*a6**5*a7**3 + 29400*a6**4*a7**4 + 23520*a6**3*a7**5 + 11760*a6**2*a7**6 + 3360*a6*a7**7 + 420*a7**8) + T**7*(2940*a6**9 + 23100*a6**8*a7 + 78960*a6**7*a7**2 + 152880*a6**6*a7**3 + 182280*a6**5*a7**4 + 135240*a6**4*a7**5 + 58800*a6**3*a7**6 + 11760*a6**2*a7**7 - 420*a6*a7**8 - 420*a7**9) + T**6*(8820*a6**10 + 67620*a6**9*a7 + 223440*a6**8*a7**2 + 411600*a6**7*a7**3 + 452760*a6**6*a7**4 + 288120*a6**5*a7**5 + 82320*a6**4*a7**6 - 11760*a6**3*a7**7 - 14700*a6**2*a7**8 - 2940*a6*a7**9) + T**5*(14700*a6**11 + 108780*a6**10*a7 + 341040*a6**9*a7**2 + 576240*a6**8*a7**3 + 535080*a6**7*a7**4 + 205800*a6**6*a7**5 - 82320*a6**5*a7**6 - 129360*a6**4*a7**7 - 55860*a6**3*a7**8 - 8820*a6**2*a7**9) + T**4*(14700*a6**12 + 102900*a6**11*a7 + 294000*a6**10*a7**2 + 411600*a6**9*a7**3 + 205800*a6**8*a7**4 - 205800*a6**7*a7**5 - 411600*a6**6*a7**6 - 294000*a6**5*a7**7 - 102900*a6**4*a7**8 - 14700*a6**3*a7**9) + T**3*(8820*a6**13 + 55860*a6**12*a7 + 129360*a6**11*a7**2 + 82320*a6**10*a7**3 - 205800*a6**9*a7**4 - 535080*a6**8*a7**5 - 576240*a6**7*a7**6 - 341040*a6**6*a7**7 - 108780*a6**5*a7**8 - 14700*a6**4*a7**9) + T**2*(2940*a6**14 + 14700*a6**13*a7 + 11760*a6**12*a7**2 - 82320*a6**11*a7**3 - 288120*a6**10*a7**4 - 452760*a6**9*a7**5 - 411600*a6**8*a7**6 - 223440*a6**7*a7**7 - 67620*a6**6*a7**8 - 8820*a6**5*a7**9) + T*(420*a6**15 + 420*a6**14*a7 - 11760*a6**13*a7**2 - 58800*a6**12*a7**3 - 135240*a6**11*a7**4 - 182280*a6**10*a7**5 - 152880*a6**9*a7**6 - 78960*a6**8*a7**7 - 23100*a6**7*a7**8 - 2940*a6**6*a7**9) - 420*a6**15*a7 - 3360*a6**14*a7**2 - 11760*a6**13*a7**3 - 23520*a6**12*a7**4 - 29400*a6**11*a7**5 - 23520*a6**10*a7**6 - 11760*a6**9*a7**7 - 3360*a6**8*a7**8 - 420*a6**7*a7**9))
        x4 = -a5*a7**8*(-(T**7*(420*a6**7 - 11760*a6**6*a7 - 23520*a6**5*a7**2 - 29400*a6**4*a7**3 - 23520*a6**3*a7**4 - 11760*a6**2*a7**5 - 3360*a6*a7**6 - 420*a7**7) + T**6*(2940*a6**8 - 74970*a6**7*a7 - 141120*a6**6*a7**2 - 167580*a6**5*a7**3 - 123480*a6**4*a7**4 - 52920*a6**3*a7**5 - 10080*a6**2*a7**6 + 630*a6*a7**7 + 420*a7**8) + T**5*(8820*a6**9 - 200550*a6**8*a7 - 343630*a6**7*a7**2 - 371420*a6**6*a7**3 - 228340*a6**5*a7**4 - 56840*a6**4*a7**5 + 16520*a6**3*a7**6 + 14350*a6**2*a7**7 + 2730*a6*a7**8) + T**4*(14700*a6**10 - 288750*a6**9*a7 - 419650*a6**8*a7**2 - 362425*a6**7*a7**3 - 100940*a6**6*a7**4 + 106820*a6**5*a7**5 + 120400*a6**4*a7**6 + 48755*a6**3*a7**7 + 7490*a6**2*a7**8) + T**3*(14700*a6**11 - 236754*a6**10*a7 - 238602*a6**9*a7**2 - 51527*a6**8*a7**3 + 241577*a6**7*a7**4 + 355348*a6**6*a7**5 + 235508*a6**5*a7**6 + 79681*a6**4*a7**7 + 11165*a6**3*a7**8) + T**2*(8820*a6**12 - 105378*a6**11*a7 - 9590*a6**10*a7**2 + 206423*a6**9*a7**3 + 411271*a6**8*a7**4 + 408534*a6**7*a7**5 + 232428*a6**6*a7**6 + 72429*a6**5*a7**7 + 9639*a6**4*a7**8) + T*(2940*a6**13 - 20094*a6**12*a7 + 55066*a6**11*a7**2 + 177817*a6**10*a7**3 + 263561*a6**9*a7**4 + 230954*a6**8*a7**5 + 122322*a6**7*a7**6 + 36375*a6**6*a7**7 + 4683*a6**5*a7**8) + 420*a6**14 + 20094*a6**12*a7**2 + 50312*a6**11*a7**3 + 68527*a6**10*a7**4 + 57368*a6**9*a7**5 + 29502*a6**8*a7**6 + 8592*a6**7*a7**7 + 1089*a6**6*a7**8)/(T**8*(420*a6**15*a7 + 3360*a6**14*a7**2 + 11760*a6**13*a7**3 + 23520*a6**12*a7**4 + 29400*a6**11*a7**5 + 23520*a6**10*a7**6 + 11760*a6**9*a7**7 + 3360*a6**8*a7**8 + 420*a6**7*a7**9) + T**7*(2940*a6**16*a7 + 23100*a6**15*a7**2 + 78960*a6**14*a7**3 + 152880*a6**13*a7**4 + 182280*a6**12*a7**5 + 135240*a6**11*a7**6 + 58800*a6**10*a7**7 + 11760*a6**9*a7**8 - 420*a6**8*a7**9 - 420*a6**7*a7**10) + T**6*(8820*a6**17*a7 + 67620*a6**16*a7**2 + 223440*a6**15*a7**3 + 411600*a6**14*a7**4 + 452760*a6**13*a7**5 + 288120*a6**12*a7**6 + 82320*a6**11*a7**7 - 11760*a6**10*a7**8 - 14700*a6**9*a7**9 - 2940*a6**8*a7**10) + T**5*(14700*a6**18*a7 + 108780*a6**17*a7**2 + 341040*a6**16*a7**3 + 576240*a6**15*a7**4 + 535080*a6**14*a7**5 + 205800*a6**13*a7**6 - 82320*a6**12*a7**7 - 129360*a6**11*a7**8 - 55860*a6**10*a7**9 - 8820*a6**9*a7**10) + T**4*(14700*a6**19*a7 + 102900*a6**18*a7**2 + 294000*a6**17*a7**3 + 411600*a6**16*a7**4 + 205800*a6**15*a7**5 - 205800*a6**14*a7**6 - 411600*a6**13*a7**7 - 294000*a6**12*a7**8 - 102900*a6**11*a7**9 - 14700*a6**10*a7**10) + T**3*(8820*a6**20*a7 + 55860*a6**19*a7**2 + 129360*a6**18*a7**3 + 82320*a6**17*a7**4 - 205800*a6**16*a7**5 - 535080*a6**15*a7**6 - 576240*a6**14*a7**7 - 341040*a6**13*a7**8 - 108780*a6**12*a7**9 - 14700*a6**11*a7**10) + T**2*(2940*a6**21*a7 + 14700*a6**20*a7**2 + 11760*a6**19*a7**3 - 82320*a6**18*a7**4 - 288120*a6**17*a7**5 - 452760*a6**16*a7**6 - 411600*a6**15*a7**7 - 223440*a6**14*a7**8 - 67620*a6**13*a7**9 - 8820*a6**12*a7**10) + T*(420*a6**22*a7 + 420*a6**21*a7**2 - 11760*a6**20*a7**3 - 58800*a6**19*a7**4 - 135240*a6**18*a7**5 - 182280*a6**17*a7**6 - 152880*a6**16*a7**7 - 78960*a6**15*a7**8 - 23100*a6**14*a7**9 - 2940*a6**13*a7**10) - 420*a6**22*a7**2 - 3360*a6**21*a7**3 - 11760*a6**20*a7**4 - 23520*a6**19*a7**5 - 29400*a6**18*a7**6 - 23520*a6**17*a7**7 - 11760*a6**16*a7**8 - 3360*a6**15*a7**9 - 420*a6**14*a7**10) - (a6 + 9*a7)*log(T + (-2*a6**44*(a6 + 9*a7)**2/(a6 + a7)**18 - 55*a6**43*a7*(a6 + 9*a7)**2/(a6 + a7)**18 - 693*a6**42*a7**2*(a6 + 9*a7)**2/(a6 + a7)**18 - 5505*a6**41*a7**3*(a6 + 9*a7)**2/(a6 + a7)**18 - 31611*a6**40*a7**4*(a6 + 9*a7)**2/(a6 + a7)**18 - 141534*a6**39*a7**5*(a6 + 9*a7)**2/(a6 + a7)**18 - 517038*a6**38*a7**6*(a6 + 9*a7)**2/(a6 + a7)**18 - 1583274*a6**37*a7**7*(a6 + 9*a7)**2/(a6 + a7)**18 - 4127409*a6**36*a7**8*(a6 + 9*a7)**2/(a6 + a7)**18 - 9239243*a6**35*a7**9*(a6 + 9*a7)**2/(a6 + a7)**18 - a6**35*a7*(a6 + 9*a7)/(a6 + a7)**9 - 17848831*a6**34*a7**10*(a6 + 9*a7)**2/(a6 + a7)**18 - 99*a6**34*a7**2*(a6 + 9*a7)/(a6 + a7)**9 - 29854773*a6**33*a7**11*(a6 + 9*a7)**2/(a6 + a7)**18 - 1815*a6**33*a7**3*(a6 + 9*a7)/(a6 + a7)**9 - 43338984*a6**32*a7**12*(a6 + 9*a7)**2/(a6 + a7)**18 - 15921*a6**32*a7**4*(a6 + 9*a7)/(a6 + a7)**9 - 54696684*a6**31*a7**13*(a6 + 9*a7)**2/(a6 + a7)**18 - 87786*a6**31*a7**5*(a6 + 9*a7)/(a6 + a7)**9 - 60079428*a6**30*a7**14*(a6 + 9*a7)**2/(a6 + a7)**18 - 346470*a6**30*a7**6*(a6 + 9*a7)/(a6 + a7)**9 - 57448644*a6**29*a7**15*(a6 + 9*a7)**2/(a6 + a7)**18 - 1055070*a6**29*a7**7*(a6 + 9*a7)/(a6 + a7)**9 - 47784756*a6**28*a7**16*(a6 + 9*a7)**2/(a6 + a7)**18 - 2598660*a6**28*a7**8*(a6 + 9*a7)/(a6 + a7)**9 + 2*a6**28 - 34505973*a6**27*a7**17*(a6 + 9*a7)**2/(a6 + a7)**18 - 5336633*a6**27*a7**9*(a6 + 9*a7)/(a6 + a7)**9 + 54*a6**27*a7 - 21558163*a6**26*a7**18*(a6 + 9*a7)**2/(a6 + a7)**18 - 9317343*a6**26*a7**10*(a6 + 9*a7)/(a6 + a7)**9 + 594*a6**26*a7**2 - 11593571*a6**25*a7**19*(a6 + 9*a7)**2/(a6 + a7)**18 - 13999743*a6**25*a7**11*(a6 + 9*a7)/(a6 + a7)**9 + 3690*a6**25*a7**3 - 5328171*a6**24*a7**20*(a6 + 9*a7)**2/(a6 + a7)**18 - 18235071*a6**24*a7**12*(a6 + 9*a7)/(a6 + a7)**9 + 15690*a6**24*a7**4 - 2072070*a6**23*a7**21*(a6 + 9*a7)**2/(a6 + a7)**18 - 20668260*a6**23*a7**13*(a6 + 9*a7)/(a6 + a7)**9 + 53748*a6**23*a7**5 - 672750*a6**22*a7**22*(a6 + 9*a7)**2/(a6 + a7)**18 - 20409588*a6**22*a7**14*(a6 + 9*a7)/(a6 + a7)**9 + 170568*a6**22*a7**6 - 179010*a6**21*a7**23*(a6 + 9*a7)**2/(a6 + a7)**18 - 17544204*a6**21*a7**15*(a6 + 9*a7)/(a6 + a7)**9 + 528204*a6**21*a7**7 - 38025*a6**20*a7**24*(a6 + 9*a7)**2/(a6 + a7)**18 - 13094607*a6**20*a7**16*(a6 + 9*a7)/(a6 + a7)**9 + 1528749*a6**20*a7**8 - 6201*a6**19*a7**25*(a6 + 9*a7)**2/(a6 + a7)**18 - 8451279*a6**19*a7**17*(a6 + 9*a7)/(a6 + a7)**9 + 3902610*a6**19*a7**9 - 729*a6**18*a7**26*(a6 + 9*a7)**2/(a6 + a7)**18 - 4689615*a6**18*a7**18*(a6 + 9*a7)/(a6 + a7)**9 + 8531488*a6**18*a7**10 - 55*a6**17*a7**27*(a6 + 9*a7)**2/(a6 + a7)**18 - 2220401*a6**17*a7**19*(a6 + 9*a7)/(a6 + a7)**9 + 15855030*a6**17*a7**11 - 2*a6**16*a7**28*(a6 + 9*a7)**2/(a6 + a7)**18 - 888048*a6**16*a7**20*(a6 + 9*a7)/(a6 + a7)**9 + 25103913*a6**16*a7**12 - 296010*a6**15*a7**21*(a6 + 9*a7)/(a6 + a7)**9 + 34028424*a6**15*a7**13 - 80730*a6**14*a7**22*(a6 + 9*a7)/(a6 + a7)**9 + 39669840*a6**14*a7**14 - 17550*a6**13*a7**23*(a6 + 9*a7)/(a6 + a7)**9 + 39904440*a6**13*a7**15 - 2925*a6**12*a7**24*(a6 + 9*a7)/(a6 + a7)**9 + 34690149*a6**12*a7**16 - 351*a6**11*a7**25*(a6 + 9*a7)/(a6 + a7)**9 + 26054694*a6**11*a7**17 - 27*a6**10*a7**26*(a6 + 9*a7)/(a6 + a7)**9 + 16868548*a6**10*a7**18 - a6**9*a7**27*(a6 + 9*a7)/(a6 + a7)**9 + 9373170*a6**9*a7**19 + 4440123*a6**8*a7**20 + 1776060*a6**7*a7**21 + 592020*a6**6*a7**22 + 161460*a6**5*a7**23 + 35100*a6**4*a7**24 + 5850*a6**3*a7**25 + 702*a6**2*a7**26 + 54*a6*a7**27 + 2*a7**28)/(2*a6**27 + 54*a6**26*a7 + 594*a6**25*a7**2 + 3654*a6**24*a7**3 + 9774*a6**23*a7**4 - 25542*a6**22*a7**5 - 267318*a6**21*a7**6 - 1144098*a6**20*a7**7 - 3427245*a6**19*a7**8 - 8037087*a6**18*a7**9 - 15426315*a6**17*a7**10 - 24798609*a6**16*a7**11 - 33852780*a6**15*a7**12 - 39589668*a6**14*a7**13 - 39876084*a6**13*a7**14 - 34682652*a6**12*a7**15 - 26053299*a6**11*a7**16 - 16868385*a6**10*a7**17 - 9373161*a6**9*a7**18 - 4440123*a6**8*a7**19 - 1776060*a6**7*a7**20 - 592020*a6**6*a7**21 - 161460*a6**5*a7**22 - 35100*a6**4*a7**23 - 5850*a6**3*a7**24 - 702*a6**2*a7**25 - 54*a6*a7**26 - 2*a7**27))/(a7**2*(a6 + a7)**9) - (36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)*log(T + (-2*a6**28*a7**4*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 + 2*a6**28 - 55*a6**27*a7**5*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - a6**27*a7**3*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 54*a6**27*a7 - 693*a6**26*a7**6*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 99*a6**26*a7**4*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 594*a6**26*a7**2 - 5505*a6**25*a7**7*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 1815*a6**25*a7**5*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 3690*a6**25*a7**3 - 31611*a6**24*a7**8*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 15921*a6**24*a7**6*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 15690*a6**24*a7**4 - 141534*a6**23*a7**9*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 87786*a6**23*a7**7*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 53748*a6**23*a7**5 - 517038*a6**22*a7**10*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 346470*a6**22*a7**8*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 170568*a6**22*a7**6 - 1583274*a6**21*a7**11*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 1055070*a6**21*a7**9*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 528204*a6**21*a7**7 - 4127409*a6**20*a7**12*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 2598660*a6**20*a7**10*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 1528749*a6**20*a7**8 - 9239243*a6**19*a7**13*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 5336633*a6**19*a7**11*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 3902610*a6**19*a7**9 - 17848831*a6**18*a7**14*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 9317343*a6**18*a7**12*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 8531488*a6**18*a7**10 - 29854773*a6**17*a7**15*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 13999743*a6**17*a7**13*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 15855030*a6**17*a7**11 - 43338984*a6**16*a7**16*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 18235071*a6**16*a7**14*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 25103913*a6**16*a7**12 - 54696684*a6**15*a7**17*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 20668260*a6**15*a7**15*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 34028424*a6**15*a7**13 - 60079428*a6**14*a7**18*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 20409588*a6**14*a7**16*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 39669840*a6**14*a7**14 - 57448644*a6**13*a7**19*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 17544204*a6**13*a7**17*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 39904440*a6**13*a7**15 - 47784756*a6**12*a7**20*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 13094607*a6**12*a7**18*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 34690149*a6**12*a7**16 - 34505973*a6**11*a7**21*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 8451279*a6**11*a7**19*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 26054694*a6**11*a7**17 - 21558163*a6**10*a7**22*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 4689615*a6**10*a7**20*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 16868548*a6**10*a7**18 - 11593571*a6**9*a7**23*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 2220401*a6**9*a7**21*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 9373170*a6**9*a7**19 - 5328171*a6**8*a7**24*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 888048*a6**8*a7**22*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 4440123*a6**8*a7**20 - 2072070*a6**7*a7**25*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 296010*a6**7*a7**23*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 1776060*a6**7*a7**21 - 672750*a6**6*a7**26*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 80730*a6**6*a7**24*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 592020*a6**6*a7**22 - 179010*a6**5*a7**27*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 17550*a6**5*a7**25*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 161460*a6**5*a7**23 - 38025*a6**4*a7**28*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 2925*a6**4*a7**26*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 35100*a6**4*a7**24 - 6201*a6**3*a7**29*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 351*a6**3*a7**27*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 5850*a6**3*a7**25 - 729*a6**2*a7**30*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - 27*a6**2*a7**28*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 702*a6**2*a7**26 - 55*a6*a7**31*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 - a6*a7**29*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)/(a6 + a7)**9 + 54*a6*a7**27 - 2*a7**32*(36*a6**7 + 84*a6**6*a7 + 126*a6**5*a7**2 + 126*a6**4*a7**3 + 84*a6**3*a7**4 + 36*a6**2*a7**5 + 9*a6*a7**6 + a7**7)**2/(a6 + a7)**18 + 2*a7**28)/(2*a6**27 + 54*a6**26*a7 + 594*a6**25*a7**2 + 3654*a6**24*a7**3 + 9774*a6**23*a7**4 - 25542*a6**22*a7**5 - 267318*a6**21*a7**6 - 1144098*a6**20*a7**7 - 3427245*a6**19*a7**8 - 8037087*a6**18*a7**9 - 15426315*a6**17*a7**10 - 24798609*a6**16*a7**11 - 33852780*a6**15*a7**12 - 39589668*a6**14*a7**13 - 39876084*a6**13*a7**14 - 34682652*a6**12*a7**15 - 26053299*a6**11*a7**16 - 16868385*a6**10*a7**17 - 9373161*a6**9*a7**18 - 4440123*a6**8*a7**19 - 1776060*a6**7*a7**20 - 592020*a6**6*a7**21 - 161460*a6**5*a7**22 - 35100*a6**4*a7**23 - 5850*a6**3*a7**24 - 702*a6**2*a7**25 - 54*a6*a7**26 - 2*a7**27))/(a6**8*(a6 + a7)**9) + log(T)/(a6**8*a7**2))
        x5 = -70*a5*a7**4*(a7**2*(3*a6 - 5*a7)*log(T + (-a6**10*a7**2*(3*a6 - 5*a7)/(a6 + a7)**9 - 10*a6**9*a7**3*(3*a6 - 5*a7)/(a6 + a7)**9 - 45*a6**8*a7**4*(3*a6 - 5*a7)/(a6 + a7)**9 - 120*a6**7*a7**5*(3*a6 - 5*a7)/(a6 + a7)**9 - 210*a6**6*a7**6*(3*a6 - 5*a7)/(a6 + a7)**9 - 252*a6**5*a7**7*(3*a6 - 5*a7)/(a6 + a7)**9 - 210*a6**4*a7**8*(3*a6 - 5*a7)/(a6 + a7)**9 - 120*a6**3*a7**9*(3*a6 - 5*a7)/(a6 + a7)**9 - 45*a6**2*a7**10*(3*a6 - 5*a7)/(a6 + a7)**9 + 3*a6**2*a7**2 - 10*a6*a7**11*(3*a6 - 5*a7)/(a6 + a7)**9 - 8*a6*a7**3 - a7**12*(3*a6 - 5*a7)/(a6 + a7)**9 + 5*a7**4)/(6*a6*a7**2 - 10*a7**3))/(a6 + a7)**9 - a7**2*(3*a6 - 5*a7)*log(T + (a6**10*a7**2*(3*a6 - 5*a7)/(a6 + a7)**9 + 10*a6**9*a7**3*(3*a6 - 5*a7)/(a6 + a7)**9 + 45*a6**8*a7**4*(3*a6 - 5*a7)/(a6 + a7)**9 + 120*a6**7*a7**5*(3*a6 - 5*a7)/(a6 + a7)**9 + 210*a6**6*a7**6*(3*a6 - 5*a7)/(a6 + a7)**9 + 252*a6**5*a7**7*(3*a6 - 5*a7)/(a6 + a7)**9 + 210*a6**4*a7**8*(3*a6 - 5*a7)/(a6 + a7)**9 + 120*a6**3*a7**9*(3*a6 - 5*a7)/(a6 + a7)**9 + 45*a6**2*a7**10*(3*a6 - 5*a7)/(a6 + a7)**9 + 3*a6**2*a7**2 + 10*a6*a7**11*(3*a6 - 5*a7)/(a6 + a7)**9 - 8*a6*a7**3 + a7**12*(3*a6 - 5*a7)/(a6 + a7)**9 + 5*a7**4)/(6*a6*a7**2 - 10*a7**3))/(a6 + a7)**9 + (T**7*(1260*a6*a7**2 - 2100*a7**3) + T**6*(8190*a6**2*a7**2 - 14280*a6*a7**3 + 1050*a7**4) + T**5*(22470*a6**3*a7**2 - 41650*a6**2*a7**3 + 6790*a6*a7**4 + 350*a7**5) + T**4*(33495*a6**4*a7**2 - 67690*a6**3*a7**3 + 18410*a6**2*a7**4 + 2170*a6*a7**5 + 175*a7**6) + T**3*(28917*a6**5*a7**2 - 66507*a6**4*a7**3 + 26782*a6**3*a7**4 + 5558*a6**2*a7**5 + 1057*a6*a7**6 + 105*a7**7) + T**2*(-70*a6**8 - 560*a6**7*a7 + 12089*a6**6*a7**2 - 43841*a6**5*a7**3 + 17066*a6**4*a7**4 + 3514*a6**3*a7**5 + 651*a6**2*a7**6 + 63*a6*a7**7) + T*(-10*a6**9 - 130*a6**8*a7 + 2587*a6**7*a7**2 - 15901*a6**6*a7**3 + 5926*a6**5*a7**4 + 1214*a6**4*a7**5 + 221*a6**3*a7**6 + 21*a6**2*a7**7) + 10*a6**9*a7 + 200*a6**8*a7**2 - 2447*a6**7*a7**3 + 872*a6**6*a7**4 + 178*a6**5*a7**5 + 32*a6**4*a7**6 + 3*a6**3*a7**7)/(T**8*(420*a6**8 + 3360*a6**7*a7 + 11760*a6**6*a7**2 + 23520*a6**5*a7**3 + 29400*a6**4*a7**4 + 23520*a6**3*a7**5 + 11760*a6**2*a7**6 + 3360*a6*a7**7 + 420*a7**8) + T**7*(2940*a6**9 + 23100*a6**8*a7 + 78960*a6**7*a7**2 + 152880*a6**6*a7**3 + 182280*a6**5*a7**4 + 135240*a6**4*a7**5 + 58800*a6**3*a7**6 + 11760*a6**2*a7**7 - 420*a6*a7**8 - 420*a7**9) + T**6*(8820*a6**10 + 67620*a6**9*a7 + 223440*a6**8*a7**2 + 411600*a6**7*a7**3 + 452760*a6**6*a7**4 + 288120*a6**5*a7**5 + 82320*a6**4*a7**6 - 11760*a6**3*a7**7 - 14700*a6**2*a7**8 - 2940*a6*a7**9) + T**5*(14700*a6**11 + 108780*a6**10*a7 + 341040*a6**9*a7**2 + 576240*a6**8*a7**3 + 535080*a6**7*a7**4 + 205800*a6**6*a7**5 - 82320*a6**5*a7**6 - 129360*a6**4*a7**7 - 55860*a6**3*a7**8 - 8820*a6**2*a7**9) + T**4*(14700*a6**12 + 102900*a6**11*a7 + 294000*a6**10*a7**2 + 411600*a6**9*a7**3 + 205800*a6**8*a7**4 - 205800*a6**7*a7**5 - 411600*a6**6*a7**6 - 294000*a6**5*a7**7 - 102900*a6**4*a7**8 - 14700*a6**3*a7**9) + T**3*(8820*a6**13 + 55860*a6**12*a7 + 129360*a6**11*a7**2 + 82320*a6**10*a7**3 - 205800*a6**9*a7**4 - 535080*a6**8*a7**5 - 576240*a6**7*a7**6 - 341040*a6**6*a7**7 - 108780*a6**5*a7**8 - 14700*a6**4*a7**9) + T**2*(2940*a6**14 + 14700*a6**13*a7 + 11760*a6**12*a7**2 - 82320*a6**11*a7**3 - 288120*a6**10*a7**4 - 452760*a6**9*a7**5 - 411600*a6**8*a7**6 - 223440*a6**7*a7**7 - 67620*a6**6*a7**8 - 8820*a6**5*a7**9) + T*(420*a6**15 + 420*a6**14*a7 - 11760*a6**13*a7**2 - 58800*a6**12*a7**3 - 135240*a6**11*a7**4 - 182280*a6**10*a7**5 - 152880*a6**9*a7**6 - 78960*a6**8*a7**7 - 23100*a6**7*a7**8 - 2940*a6**6*a7**9) - 420*a6**15*a7 - 3360*a6**14*a7**2 - 11760*a6**13*a7**3 - 23520*a6**12*a7**4 - 29400*a6**11*a7**5 - 23520*a6**10*a7**6 - 11760*a6**9*a7**7 - 3360*a6**8*a7**8 - 420*a6**7*a7**9))
        x6 = 56*a4*a7**5*(21*T**2 + 7*T*a6 + a6**2)/(105*T**7 + 735*T**6*a6 + 2205*T**5*a6**2 + 3675*T**4*a6**3 + 3675*T**3*a6**4 + 2205*T**2*a6**5 + 735*T*a6**6 + 105*a6**7)
        x7 = 56*a4*a7**3*(35*T**4 + 35*T**3*a6 + 21*T**2*a6**2 + 7*T*a6**3 + a6**4)/(105*T**7 + 735*T**6*a6 + 2205*T**5*a6**2 + 3675*T**4*a6**3 + 3675*T**3*a6**4 + 2205*T**2*a6**5 + 735*T*a6**6 + 105*a6**7)
        x8 = -28*a5*a7**6*((a6 - 7*a7)*log(T + (-a6**10*(a6 - 7*a7)/(a6 + a7)**9 - 10*a6**9*a7*(a6 - 7*a7)/(a6 + a7)**9 - 45*a6**8*a7**2*(a6 - 7*a7)/(a6 + a7)**9 - 120*a6**7*a7**3*(a6 - 7*a7)/(a6 + a7)**9 - 210*a6**6*a7**4*(a6 - 7*a7)/(a6 + a7)**9 - 252*a6**5*a7**5*(a6 - 7*a7)/(a6 + a7)**9 - 210*a6**4*a7**6*(a6 - 7*a7)/(a6 + a7)**9 - 120*a6**3*a7**7*(a6 - 7*a7)/(a6 + a7)**9 - 45*a6**2*a7**8*(a6 - 7*a7)/(a6 + a7)**9 + a6**2 - 10*a6*a7**9*(a6 - 7*a7)/(a6 + a7)**9 - 8*a6*a7 - a7**10*(a6 - 7*a7)/(a6 + a7)**9 + 7*a7**2)/(2*a6 - 14*a7))/(a6 + a7)**9 - (a6 - 7*a7)*log(T + (a6**10*(a6 - 7*a7)/(a6 + a7)**9 + 10*a6**9*a7*(a6 - 7*a7)/(a6 + a7)**9 + 45*a6**8*a7**2*(a6 - 7*a7)/(a6 + a7)**9 + 120*a6**7*a7**3*(a6 - 7*a7)/(a6 + a7)**9 + 210*a6**6*a7**4*(a6 - 7*a7)/(a6 + a7)**9 + 252*a6**5*a7**5*(a6 - 7*a7)/(a6 + a7)**9 + 210*a6**4*a7**6*(a6 - 7*a7)/(a6 + a7)**9 + 120*a6**3*a7**7*(a6 - 7*a7)/(a6 + a7)**9 + 45*a6**2*a7**8*(a6 - 7*a7)/(a6 + a7)**9 + a6**2 + 10*a6*a7**9*(a6 - 7*a7)/(a6 + a7)**9 - 8*a6*a7 + a7**10*(a6 - 7*a7)/(a6 + a7)**9 + 7*a7**2)/(2*a6 - 14*a7))/(a6 + a7)**9 + (T**7*(420*a6 - 2940*a7) + T**6*(2730*a6**2 - 19320*a6*a7 + 1470*a7**2) + T**5*(7490*a6**3 - 53830*a6**2*a7 + 9730*a6*a7**2 + 490*a7**3) + T**4*(11165*a6**4 - 82110*a6**3*a7 + 27230*a6**2*a7**2 + 3150*a6*a7**3 + 245*a7**4) + T**3*(9639*a6**5 - 73577*a6**4*a7 + 41482*a6**3*a7**2 + 8498*a6**2*a7**3 + 1547*a6*a7**4 + 147*a7**5) + T**2*(4683*a6**6 - 38283*a6**5*a7 + 36666*a6**4*a7**2 + 12334*a6**3*a7**3 + 4081*a6**2*a7**4 + 917*a6*a7**5 + 98*a7**6) + T*(1089*a6**7 - 10455*a6**6*a7 + 18246*a6**5*a7**2 + 10174*a6**4*a7**3 + 5751*a6**3*a7**4 + 2383*a6**2*a7**5 + 606*a6*a7**6 + 70*a7**7) - 1509*a6**7*a7 + 2832*a6**6*a7**2 + 1578*a6**5*a7**3 + 872*a6**4*a7**4 + 353*a6**3*a7**5 + 88*a6**2*a7**6 + 10*a6*a7**7)/(T**8*(420*a6**8 + 3360*a6**7*a7 + 11760*a6**6*a7**2 + 23520*a6**5*a7**3 + 29400*a6**4*a7**4 + 23520*a6**3*a7**5 + 11760*a6**2*a7**6 + 3360*a6*a7**7 + 420*a7**8) + T**7*(2940*a6**9 + 23100*a6**8*a7 + 78960*a6**7*a7**2 + 152880*a6**6*a7**3 + 182280*a6**5*a7**4 + 135240*a6**4*a7**5 + 58800*a6**3*a7**6 + 11760*a6**2*a7**7 - 420*a6*a7**8 - 420*a7**9) + T**6*(8820*a6**10 + 67620*a6**9*a7 + 223440*a6**8*a7**2 + 411600*a6**7*a7**3 + 452760*a6**6*a7**4 + 288120*a6**5*a7**5 + 82320*a6**4*a7**6 - 11760*a6**3*a7**7 - 14700*a6**2*a7**8 - 2940*a6*a7**9) + T**5*(14700*a6**11 + 108780*a6**10*a7 + 341040*a6**9*a7**2 + 576240*a6**8*a7**3 + 535080*a6**7*a7**4 + 205800*a6**6*a7**5 - 82320*a6**5*a7**6 - 129360*a6**4*a7**7 - 55860*a6**3*a7**8 - 8820*a6**2*a7**9) + T**4*(14700*a6**12 + 102900*a6**11*a7 + 294000*a6**10*a7**2 + 411600*a6**9*a7**3 + 205800*a6**8*a7**4 - 205800*a6**7*a7**5 - 411600*a6**6*a7**6 - 294000*a6**5*a7**7 - 102900*a6**4*a7**8 - 14700*a6**3*a7**9) + T**3*(8820*a6**13 + 55860*a6**12*a7 + 129360*a6**11*a7**2 + 82320*a6**10*a7**3 - 205800*a6**9*a7**4 - 535080*a6**8*a7**5 - 576240*a6**7*a7**6 - 341040*a6**6*a7**7 - 108780*a6**5*a7**8 - 14700*a6**4*a7**9) + T**2*(2940*a6**14 + 14700*a6**13*a7 + 11760*a6**12*a7**2 - 82320*a6**11*a7**3 - 288120*a6**10*a7**4 - 452760*a6**9*a7**5 - 411600*a6**8*a7**6 - 223440*a6**7*a7**7 - 67620*a6**6*a7**8 - 8820*a6**5*a7**9) + T*(420*a6**15 + 420*a6**14*a7 - 11760*a6**13*a7**2 - 58800*a6**12*a7**3 - 135240*a6**11*a7**4 - 182280*a6**10*a7**5 - 152880*a6**9*a7**6 - 78960*a6**8*a7**7 - 23100*a6**7*a7**8 - 2940*a6**6*a7**9) - 420*a6**15*a7 - 3360*a6**14*a7**2 - 11760*a6**13*a7**3 - 23520*a6**12*a7**4 - 29400*a6**11*a7**5 - 23520*a6**10*a7**6 - 11760*a6**9*a7**7 - 3360*a6**8*a7**8 - 420*a6**7*a7**9))
        x9 = -28*a5*a7**2*(a7**4*(5*a6 - 3*a7)*log(T + (-a6**10*a7**4*(5*a6 - 3*a7)/(a6 + a7)**9 - 10*a6**9*a7**5*(5*a6 - 3*a7)/(a6 + a7)**9 - 45*a6**8*a7**6*(5*a6 - 3*a7)/(a6 + a7)**9 - 120*a6**7*a7**7*(5*a6 - 3*a7)/(a6 + a7)**9 - 210*a6**6*a7**8*(5*a6 - 3*a7)/(a6 + a7)**9 - 252*a6**5*a7**9*(5*a6 - 3*a7)/(a6 + a7)**9 - 210*a6**4*a7**10*(5*a6 - 3*a7)/(a6 + a7)**9 - 120*a6**3*a7**11*(5*a6 - 3*a7)/(a6 + a7)**9 - 45*a6**2*a7**12*(5*a6 - 3*a7)/(a6 + a7)**9 + 5*a6**2*a7**4 - 10*a6*a7**13*(5*a6 - 3*a7)/(a6 + a7)**9 - 8*a6*a7**5 - a7**14*(5*a6 - 3*a7)/(a6 + a7)**9 + 3*a7**6)/(10*a6*a7**4 - 6*a7**5))/(a6 + a7)**9 - a7**4*(5*a6 - 3*a7)*log(T + (a6**10*a7**4*(5*a6 - 3*a7)/(a6 + a7)**9 + 10*a6**9*a7**5*(5*a6 - 3*a7)/(a6 + a7)**9 + 45*a6**8*a7**6*(5*a6 - 3*a7)/(a6 + a7)**9 + 120*a6**7*a7**7*(5*a6 - 3*a7)/(a6 + a7)**9 + 210*a6**6*a7**8*(5*a6 - 3*a7)/(a6 + a7)**9 + 252*a6**5*a7**9*(5*a6 - 3*a7)/(a6 + a7)**9 + 210*a6**4*a7**10*(5*a6 - 3*a7)/(a6 + a7)**9 + 120*a6**3*a7**11*(5*a6 - 3*a7)/(a6 + a7)**9 + 45*a6**2*a7**12*(5*a6 - 3*a7)/(a6 + a7)**9 + 5*a6**2*a7**4 + 10*a6*a7**13*(5*a6 - 3*a7)/(a6 + a7)**9 - 8*a6*a7**5 + a7**14*(5*a6 - 3*a7)/(a6 + a7)**9 + 3*a7**6)/(10*a6*a7**4 - 6*a7**5))/(a6 + a7)**9 + (T**7*(2100*a6*a7**4 - 1260*a7**5) + T**6*(13650*a6**2*a7**4 - 9240*a6*a7**5 + 630*a7**6) + T**5*(37450*a6**3*a7**4 - 29470*a6**2*a7**5 + 3850*a6*a7**6 + 210*a7**7) + T**4*(-105*a6**8 - 840*a6**7*a7 - 2940*a6**6*a7**2 - 5880*a6**5*a7**3 + 48475*a6**4*a7**4 - 59150*a6**3*a7**5 + 6650*a6**2*a7**6 + 350*a6*a7**7) + T**3*(-63*a6**9 - 567*a6**8*a7 - 2268*a6**7*a7**2 - 5292*a6**6*a7**3 + 40257*a6**5*a7**4 - 67375*a6**4*a7**5 + 6790*a6**3*a7**6 + 350*a6**2*a7**7) + T**2*(-21*a6**10 - 161*a6**9*a7 - 574*a6**8*a7**2 - 1316*a6**7*a7**3 + 21161*a6**6*a7**4 - 44597*a6**5*a7**5 + 4130*a6**4*a7**6 + 210*a6**3*a7**7) + T*(-3*a6**11 - 11*a6**10*a7 + 46*a6**9*a7**2 + 374*a6**8*a7**3 + 6451*a6**7*a7**4 - 16069*a6**6*a7**5 + 1390*a6**5*a7**6 + 70*a6**4*a7**7) + 3*a6**11*a7 + 32*a6**10*a7**2 + 178*a6**9*a7**3 + 872*a6**8*a7**4 - 2447*a6**7*a7**5 + 200*a6**6*a7**6 + 10*a6**5*a7**7)/(T**8*(420*a6**8 + 3360*a6**7*a7 + 11760*a6**6*a7**2 + 23520*a6**5*a7**3 + 29400*a6**4*a7**4 + 23520*a6**3*a7**5 + 11760*a6**2*a7**6 + 3360*a6*a7**7 + 420*a7**8) + T**7*(2940*a6**9 + 23100*a6**8*a7 + 78960*a6**7*a7**2 + 152880*a6**6*a7**3 + 182280*a6**5*a7**4 + 135240*a6**4*a7**5 + 58800*a6**3*a7**6 + 11760*a6**2*a7**7 - 420*a6*a7**8 - 420*a7**9) + T**6*(8820*a6**10 + 67620*a6**9*a7 + 223440*a6**8*a7**2 + 411600*a6**7*a7**3 + 452760*a6**6*a7**4 + 288120*a6**5*a7**5 + 82320*a6**4*a7**6 - 11760*a6**3*a7**7 - 14700*a6**2*a7**8 - 2940*a6*a7**9) + T**5*(14700*a6**11 + 108780*a6**10*a7 + 341040*a6**9*a7**2 + 576240*a6**8*a7**3 + 535080*a6**7*a7**4 + 205800*a6**6*a7**5 - 82320*a6**5*a7**6 - 129360*a6**4*a7**7 - 55860*a6**3*a7**8 - 8820*a6**2*a7**9) + T**4*(14700*a6**12 + 102900*a6**11*a7 + 294000*a6**10*a7**2 + 411600*a6**9*a7**3 + 205800*a6**8*a7**4 - 205800*a6**7*a7**5 - 411600*a6**6*a7**6 - 294000*a6**5*a7**7 - 102900*a6**4*a7**8 - 14700*a6**3*a7**9) + T**3*(8820*a6**13 + 55860*a6**12*a7 + 129360*a6**11*a7**2 + 82320*a6**10*a7**3 - 205800*a6**9*a7**4 - 535080*a6**8*a7**5 - 576240*a6**7*a7**6 - 341040*a6**6*a7**7 - 108780*a6**5*a7**8 - 14700*a6**4*a7**9) + T**2*(2940*a6**14 + 14700*a6**13*a7 + 11760*a6**12*a7**2 - 82320*a6**11*a7**3 - 288120*a6**10*a7**4 - 452760*a6**9*a7**5 - 411600*a6**8*a7**6 - 223440*a6**7*a7**7 - 67620*a6**6*a7**8 - 8820*a6**5*a7**9) + T*(420*a6**15 + 420*a6**14*a7 - 11760*a6**13*a7**2 - 58800*a6**12*a7**3 - 135240*a6**11*a7**4 - 182280*a6**10*a7**5 - 152880*a6**9*a7**6 - 78960*a6**8*a7**7 - 23100*a6**7*a7**8 - 2940*a6**6*a7**9) - 420*a6**15*a7 - 3360*a6**14*a7**2 - 11760*a6**13*a7**3 - 23520*a6**12*a7**4 - 29400*a6**11*a7**5 - 23520*a6**10*a7**6 - 11760*a6**9*a7**7 - 3360*a6**8*a7**8 - 420*a6**7*a7**9))
        x10 = 8*a4*a7**7/(7*T**7 + 49*T**6*a6 + 147*T**5*a6**2 + 245*T**4*a6**3 + 245*T**3*a6**4 + 147*T**2*a6**5 + 49*T*a6**6 + 7*a6**7)
        x11 = 8*a4*a7*(7*T**6 + 21*T**5*a6 + 35*T**4*a6**2 + 35*T**3*a6**3 + 21*T**2*a6**4 + 7*T*a6**5 + a6**6)/(7*T**7 + 49*T**6*a6 + 147*T**5*a6**2 + 245*T**4*a6**3 + 245*T**3*a6**4 + 147*T**2*a6**5 + 49*T*a6**6 + 7*a6**7)
        x12 = 8*a5*a7**7*(-(840*T**7 + T**6*(5460*a6 - 420*a7) + T**5*(14980*a6**2 - 2800*a6*a7 - 140*a7**2) + T**4*(22330*a6**3 - 7910*a6**2*a7 - 910*a6*a7**2 - 70*a7**3) + T**3*(19278*a6**4 - 12208*a6**3*a7 - 2492*a6**2*a7**2 - 448*a6*a7**3 - 42*a7**4) + T**2*(9366*a6**5 - 11004*a6**4*a7 - 3696*a6**3*a7**2 - 1204*a6**2*a7**3 - 266*a6*a7**4 - 28*a7**5) + T*(2178*a6**6 - 5664*a6**5*a7 - 3156*a6**4*a7**2 - 1744*a6**3*a7**3 - 706*a6**2*a7**4 - 176*a6*a7**5 - 20*a7**6) + 105*a6**7 - 1443*a6**6*a7 - 1497*a6**5*a7**2 - 1443*a6**4*a7**3 - 1007*a6**3*a7**4 - 463*a6**2*a7**5 - 125*a6*a7**6 - 15*a7**7)/(T**8*(105*a6**8 + 840*a6**7*a7 + 2940*a6**6*a7**2 + 5880*a6**5*a7**3 + 7350*a6**4*a7**4 + 5880*a6**3*a7**5 + 2940*a6**2*a7**6 + 840*a6*a7**7 + 105*a7**8) + T**7*(735*a6**9 + 5775*a6**8*a7 + 19740*a6**7*a7**2 + 38220*a6**6*a7**3 + 45570*a6**5*a7**4 + 33810*a6**4*a7**5 + 14700*a6**3*a7**6 + 2940*a6**2*a7**7 - 105*a6*a7**8 - 105*a7**9) + T**6*(2205*a6**10 + 16905*a6**9*a7 + 55860*a6**8*a7**2 + 102900*a6**7*a7**3 + 113190*a6**6*a7**4 + 72030*a6**5*a7**5 + 20580*a6**4*a7**6 - 2940*a6**3*a7**7 - 3675*a6**2*a7**8 - 735*a6*a7**9) + T**5*(3675*a6**11 + 27195*a6**10*a7 + 85260*a6**9*a7**2 + 144060*a6**8*a7**3 + 133770*a6**7*a7**4 + 51450*a6**6*a7**5 - 20580*a6**5*a7**6 - 32340*a6**4*a7**7 - 13965*a6**3*a7**8 - 2205*a6**2*a7**9) + T**4*(3675*a6**12 + 25725*a6**11*a7 + 73500*a6**10*a7**2 + 102900*a6**9*a7**3 + 51450*a6**8*a7**4 - 51450*a6**7*a7**5 - 102900*a6**6*a7**6 - 73500*a6**5*a7**7 - 25725*a6**4*a7**8 - 3675*a6**3*a7**9) + T**3*(2205*a6**13 + 13965*a6**12*a7 + 32340*a6**11*a7**2 + 20580*a6**10*a7**3 - 51450*a6**9*a7**4 - 133770*a6**8*a7**5 - 144060*a6**7*a7**6 - 85260*a6**6*a7**7 - 27195*a6**5*a7**8 - 3675*a6**4*a7**9) + T**2*(735*a6**14 + 3675*a6**13*a7 + 2940*a6**12*a7**2 - 20580*a6**11*a7**3 - 72030*a6**10*a7**4 - 113190*a6**9*a7**5 - 102900*a6**8*a7**6 - 55860*a6**7*a7**7 - 16905*a6**6*a7**8 - 2205*a6**5*a7**9) + T*(105*a6**15 + 105*a6**14*a7 - 2940*a6**13*a7**2 - 14700*a6**12*a7**3 - 33810*a6**11*a7**4 - 45570*a6**10*a7**5 - 38220*a6**9*a7**6 - 19740*a6**8*a7**7 - 5775*a6**7*a7**8 - 735*a6**6*a7**9) - 105*a6**15*a7 - 840*a6**14*a7**2 - 2940*a6**13*a7**3 - 5880*a6**12*a7**4 - 7350*a6**11*a7**5 - 5880*a6**10*a7**6 - 2940*a6**9*a7**7 - 840*a6**8*a7**8 - 105*a6**7*a7**9) - 8*log(T - a6**10/(2*(a6 + a7)**9) - 5*a6**9*a7/(a6 + a7)**9 - 45*a6**8*a7**2/(2*(a6 + a7)**9) - 60*a6**7*a7**3/(a6 + a7)**9 - 105*a6**6*a7**4/(a6 + a7)**9 - 126*a6**5*a7**5/(a6 + a7)**9 - 105*a6**4*a7**6/(a6 + a7)**9 - 60*a6**3*a7**7/(a6 + a7)**9 - 45*a6**2*a7**8/(2*(a6 + a7)**9) - 5*a6*a7**9/(a6 + a7)**9 + a6/2 - a7**10/(2*(a6 + a7)**9) - a7/2)/(a6 + a7)**9 + 8*log(T + a6**10/(2*(a6 + a7)**9) + 5*a6**9*a7/(a6 + a7)**9 + 45*a6**8*a7**2/(2*(a6 + a7)**9) + 60*a6**7*a7**3/(a6 + a7)**9 + 105*a6**6*a7**4/(a6 + a7)**9 + 126*a6**5*a7**5/(a6 + a7)**9 + 105*a6**4*a7**6/(a6 + a7)**9 + 60*a6**3*a7**7/(a6 + a7)**9 + 45*a6**2*a7**8/(2*(a6 + a7)**9) + 5*a6*a7**9/(a6 + a7)**9 + a6/2 + a7**10/(2*(a6 + a7)**9) - a7/2)/(a6 + a7)**9)
        x13 = 8*a5*a7*(2*a7**5*(3*a6 - a7)*log(T + (-2*a6**10*a7**5*(3*a6 - a7)/(a6 + a7)**9 - 20*a6**9*a7**6*(3*a6 - a7)/(a6 + a7)**9 - 90*a6**8*a7**7*(3*a6 - a7)/(a6 + a7)**9 - 240*a6**7*a7**8*(3*a6 - a7)/(a6 + a7)**9 - 420*a6**6*a7**9*(3*a6 - a7)/(a6 + a7)**9 - 504*a6**5*a7**10*(3*a6 - a7)/(a6 + a7)**9 - 420*a6**4*a7**11*(3*a6 - a7)/(a6 + a7)**9 - 240*a6**3*a7**12*(3*a6 - a7)/(a6 + a7)**9 - 90*a6**2*a7**13*(3*a6 - a7)/(a6 + a7)**9 + 6*a6**2*a7**5 - 20*a6*a7**14*(3*a6 - a7)/(a6 + a7)**9 - 8*a6*a7**6 - 2*a7**15*(3*a6 - a7)/(a6 + a7)**9 + 2*a7**7)/(12*a6*a7**5 - 4*a7**6))/(a6 + a7)**9 - 2*a7**5*(3*a6 - a7)*log(T + (2*a6**10*a7**5*(3*a6 - a7)/(a6 + a7)**9 + 20*a6**9*a7**6*(3*a6 - a7)/(a6 + a7)**9 + 90*a6**8*a7**7*(3*a6 - a7)/(a6 + a7)**9 + 240*a6**7*a7**8*(3*a6 - a7)/(a6 + a7)**9 + 420*a6**6*a7**9*(3*a6 - a7)/(a6 + a7)**9 + 504*a6**5*a7**10*(3*a6 - a7)/(a6 + a7)**9 + 420*a6**4*a7**11*(3*a6 - a7)/(a6 + a7)**9 + 240*a6**3*a7**12*(3*a6 - a7)/(a6 + a7)**9 + 90*a6**2*a7**13*(3*a6 - a7)/(a6 + a7)**9 + 6*a6**2*a7**5 + 20*a6*a7**14*(3*a6 - a7)/(a6 + a7)**9 - 8*a6*a7**6 + 2*a7**15*(3*a6 - a7)/(a6 + a7)**9 + 2*a7**7)/(12*a6*a7**5 - 4*a7**6))/(a6 + a7)**9 + (T**7*(1260*a6*a7**5 - 420*a7**6) + T**6*(8190*a6**2*a7**5 - 3360*a6*a7**6 + 210*a7**7) + T**5*(-70*a6**8 - 560*a6**7*a7 - 1960*a6**6*a7**2 - 3920*a6**5*a7**3 - 4900*a6**4*a7**4 + 18550*a6**3*a7**5 - 13650*a6**2*a7**6 + 630*a6*a7**7) + T**4*(-70*a6**9 - 595*a6**8*a7 - 2240*a6**7*a7**2 - 4900*a6**6*a7**3 - 6860*a6**5*a7**4 + 27125*a6**4*a7**5 - 26950*a6**3*a7**6 + 1050*a6**2*a7**7) + T**3*(-42*a6**10 - 329*a6**9*a7 - 1141*a6**8*a7**2 - 2324*a6**7*a7**3 - 3136*a6**6*a7**4 + 25879*a6**5*a7**5 - 30205*a6**4*a7**6 + 1050*a6**3*a7**7) + T**2*(-14*a6**11 - 91*a6**10*a7 - 203*a6**9*a7**2 - 42*a6**8*a7**3 + 672*a6**7*a7**4 + 15519*a6**6*a7**5 - 19719*a6**5*a7**6 + 630*a6**4*a7**7) + T*(-2*a6**12 - 5*a6**11*a7 + 47*a6**10*a7**2 + 338*a6**9*a7**3 + 1062*a6**8*a7**4 + 5301*a6**7*a7**5 - 7023*a6**6*a7**6 + 210*a6**5*a7**7) + 2*a6**12*a7 + 19*a6**11*a7**2 + 86*a6**10*a7**3 + 264*a6**9*a7**4 + 786*a6**8*a7**5 - 1059*a6**7*a7**6 + 30*a6**6*a7**7)/(T**8*(210*a6**8 + 1680*a6**7*a7 + 5880*a6**6*a7**2 + 11760*a6**5*a7**3 + 14700*a6**4*a7**4 + 11760*a6**3*a7**5 + 5880*a6**2*a7**6 + 1680*a6*a7**7 + 210*a7**8) + T**7*(1470*a6**9 + 11550*a6**8*a7 + 39480*a6**7*a7**2 + 76440*a6**6*a7**3 + 91140*a6**5*a7**4 + 67620*a6**4*a7**5 + 29400*a6**3*a7**6 + 5880*a6**2*a7**7 - 210*a6*a7**8 - 210*a7**9) + T**6*(4410*a6**10 + 33810*a6**9*a7 + 111720*a6**8*a7**2 + 205800*a6**7*a7**3 + 226380*a6**6*a7**4 + 144060*a6**5*a7**5 + 41160*a6**4*a7**6 - 5880*a6**3*a7**7 - 7350*a6**2*a7**8 - 1470*a6*a7**9) + T**5*(7350*a6**11 + 54390*a6**10*a7 + 170520*a6**9*a7**2 + 288120*a6**8*a7**3 + 267540*a6**7*a7**4 + 102900*a6**6*a7**5 - 41160*a6**5*a7**6 - 64680*a6**4*a7**7 - 27930*a6**3*a7**8 - 4410*a6**2*a7**9) + T**4*(7350*a6**12 + 51450*a6**11*a7 + 147000*a6**10*a7**2 + 205800*a6**9*a7**3 + 102900*a6**8*a7**4 - 102900*a6**7*a7**5 - 205800*a6**6*a7**6 - 147000*a6**5*a7**7 - 51450*a6**4*a7**8 - 7350*a6**3*a7**9) + T**3*(4410*a6**13 + 27930*a6**12*a7 + 64680*a6**11*a7**2 + 41160*a6**10*a7**3 - 102900*a6**9*a7**4 - 267540*a6**8*a7**5 - 288120*a6**7*a7**6 - 170520*a6**6*a7**7 - 54390*a6**5*a7**8 - 7350*a6**4*a7**9) + T**2*(1470*a6**14 + 7350*a6**13*a7 + 5880*a6**12*a7**2 - 41160*a6**11*a7**3 - 144060*a6**10*a7**4 - 226380*a6**9*a7**5 - 205800*a6**8*a7**6 - 111720*a6**7*a7**7 - 33810*a6**6*a7**8 - 4410*a6**5*a7**9) + T*(210*a6**15 + 210*a6**14*a7 - 5880*a6**13*a7**2 - 29400*a6**12*a7**3 - 67620*a6**11*a7**4 - 91140*a6**10*a7**5 - 76440*a6**9*a7**6 - 39480*a6**8*a7**7 - 11550*a6**7*a7**8 - 1470*a6**6*a7**9) - 210*a6**15*a7 - 1680*a6**14*a7**2 - 5880*a6**13*a7**3 - 11760*a6**12*a7**4 - 14700*a6**11*a7**5 - 11760*a6**10*a7**6 - 5880*a6**9*a7**7 - 1680*a6**8*a7**8 - 210*a6**7*a7**9))
        x14 = -28*a4*a7**6*(7*T + a6)/(42*T**7 + 294*T**6*a6 + 882*T**5*a6**2 + 1470*T**4*a6**3 + 1470*T**3*a6**4 + 882*T**2*a6**5 + 294*T*a6**6 + 42*a6**7)
        x15 = -28*a4*a7**2*(21*T**5 + 35*T**4*a6 + 35*T**3*a6**2 + 21*T**2*a6**3 + 7*T*a6**4 + a6**5)/(42*T**7 + 294*T**6*a6 + 882*T**5*a6**2 + 1470*T**4*a6**3 + 1470*T**3*a6**4 + 882*T**2*a6**5 + 294*T*a6**6 + 42*a6**7)
        x16 = 56*a5*a7**5*(2*a7*(a6 - 3*a7)*log(T + (-2*a6**10*a7*(a6 - 3*a7)/(a6 + a7)**9 - 20*a6**9*a7**2*(a6 - 3*a7)/(a6 + a7)**9 - 90*a6**8*a7**3*(a6 - 3*a7)/(a6 + a7)**9 - 240*a6**7*a7**4*(a6 - 3*a7)/(a6 + a7)**9 - 420*a6**6*a7**5*(a6 - 3*a7)/(a6 + a7)**9 - 504*a6**5*a7**6*(a6 - 3*a7)/(a6 + a7)**9 - 420*a6**4*a7**7*(a6 - 3*a7)/(a6 + a7)**9 - 240*a6**3*a7**8*(a6 - 3*a7)/(a6 + a7)**9 - 90*a6**2*a7**9*(a6 - 3*a7)/(a6 + a7)**9 + 2*a6**2*a7 - 20*a6*a7**10*(a6 - 3*a7)/(a6 + a7)**9 - 8*a6*a7**2 - 2*a7**11*(a6 - 3*a7)/(a6 + a7)**9 + 6*a7**3)/(4*a6*a7 - 12*a7**2))/(a6 + a7)**9 - 2*a7*(a6 - 3*a7)*log(T + (2*a6**10*a7*(a6 - 3*a7)/(a6 + a7)**9 + 20*a6**9*a7**2*(a6 - 3*a7)/(a6 + a7)**9 + 90*a6**8*a7**3*(a6 - 3*a7)/(a6 + a7)**9 + 240*a6**7*a7**4*(a6 - 3*a7)/(a6 + a7)**9 + 420*a6**6*a7**5*(a6 - 3*a7)/(a6 + a7)**9 + 504*a6**5*a7**6*(a6 - 3*a7)/(a6 + a7)**9 + 420*a6**4*a7**7*(a6 - 3*a7)/(a6 + a7)**9 + 240*a6**3*a7**8*(a6 - 3*a7)/(a6 + a7)**9 + 90*a6**2*a7**9*(a6 - 3*a7)/(a6 + a7)**9 + 2*a6**2*a7 + 20*a6*a7**10*(a6 - 3*a7)/(a6 + a7)**9 - 8*a6*a7**2 + 2*a7**11*(a6 - 3*a7)/(a6 + a7)**9 + 6*a7**3)/(4*a6*a7 - 12*a7**2))/(a6 + a7)**9 + (T**7*(420*a6*a7 - 1260*a7**2) + T**6*(2730*a6**2*a7 - 8400*a6*a7**2 + 630*a7**3) + T**5*(7490*a6**3*a7 - 23870*a6**2*a7**2 + 4130*a6*a7**3 + 210*a7**4) + T**4*(11165*a6**4*a7 - 37450*a6**3*a7**2 + 11410*a6**2*a7**3 + 1330*a6*a7**4 + 105*a7**5) + T**3*(9639*a6**5*a7 - 35021*a6**4*a7**2 + 17066*a6**3*a7**3 + 3514*a6**2*a7**4 + 651*a6*a7**5 + 63*a7**6) + T**2*(4683*a6**6*a7 - 19551*a6**5*a7**2 + 14658*a6**4*a7**3 + 4942*a6**3*a7**4 + 1673*a6**2*a7**5 + 385*a6*a7**6 + 42*a7**7) + T*(-30*a6**8 + 849*a6**7*a7 - 6939*a6**6*a7**2 + 5238*a6**5*a7**3 + 1762*a6**4*a7**4 + 583*a6**3*a7**5 + 131*a6**2*a7**6 + 14*a6*a7**7) + 30*a6**8*a7 - 1059*a6**7*a7**2 + 786*a6**6*a7**3 + 264*a6**5*a7**4 + 86*a6**4*a7**5 + 19*a6**3*a7**6 + 2*a6**2*a7**7)/(T**8*(210*a6**8 + 1680*a6**7*a7 + 5880*a6**6*a7**2 + 11760*a6**5*a7**3 + 14700*a6**4*a7**4 + 11760*a6**3*a7**5 + 5880*a6**2*a7**6 + 1680*a6*a7**7 + 210*a7**8) + T**7*(1470*a6**9 + 11550*a6**8*a7 + 39480*a6**7*a7**2 + 76440*a6**6*a7**3 + 91140*a6**5*a7**4 + 67620*a6**4*a7**5 + 29400*a6**3*a7**6 + 5880*a6**2*a7**7 - 210*a6*a7**8 - 210*a7**9) + T**6*(4410*a6**10 + 33810*a6**9*a7 + 111720*a6**8*a7**2 + 205800*a6**7*a7**3 + 226380*a6**6*a7**4 + 144060*a6**5*a7**5 + 41160*a6**4*a7**6 - 5880*a6**3*a7**7 - 7350*a6**2*a7**8 - 1470*a6*a7**9) + T**5*(7350*a6**11 + 54390*a6**10*a7 + 170520*a6**9*a7**2 + 288120*a6**8*a7**3 + 267540*a6**7*a7**4 + 102900*a6**6*a7**5 - 41160*a6**5*a7**6 - 64680*a6**4*a7**7 - 27930*a6**3*a7**8 - 4410*a6**2*a7**9) + T**4*(7350*a6**12 + 51450*a6**11*a7 + 147000*a6**10*a7**2 + 205800*a6**9*a7**3 + 102900*a6**8*a7**4 - 102900*a6**7*a7**5 - 205800*a6**6*a7**6 - 147000*a6**5*a7**7 - 51450*a6**4*a7**8 - 7350*a6**3*a7**9) + T**3*(4410*a6**13 + 27930*a6**12*a7 + 64680*a6**11*a7**2 + 41160*a6**10*a7**3 - 102900*a6**9*a7**4 - 267540*a6**8*a7**5 - 288120*a6**7*a7**6 - 170520*a6**6*a7**7 - 54390*a6**5*a7**8 - 7350*a6**4*a7**9) + T**2*(1470*a6**14 + 7350*a6**13*a7 + 5880*a6**12*a7**2 - 41160*a6**11*a7**3 - 144060*a6**10*a7**4 - 226380*a6**9*a7**5 - 205800*a6**8*a7**6 - 111720*a6**7*a7**7 - 33810*a6**6*a7**8 - 4410*a6**5*a7**9) + T*(210*a6**15 + 210*a6**14*a7 - 5880*a6**13*a7**2 - 29400*a6**12*a7**3 - 67620*a6**11*a7**4 - 91140*a6**10*a7**5 - 76440*a6**9*a7**6 - 39480*a6**8*a7**7 - 11550*a6**7*a7**8 - 1470*a6**6*a7**9) - 210*a6**15*a7 - 1680*a6**14*a7**2 - 5880*a6**13*a7**3 - 11760*a6**12*a7**4 - 14700*a6**11*a7**5 - 11760*a6**10*a7**6 - 5880*a6**9*a7**7 - 1680*a6**8*a7**8 - 210*a6**7*a7**9))
        x17 = 56*a5*a7**3*(4*a7**3*(a6 - a7)*log(T + (-4*a6**10*a7**3*(a6 - a7)/(a6 + a7)**9 - 40*a6**9*a7**4*(a6 - a7)/(a6 + a7)**9 - 180*a6**8*a7**5*(a6 - a7)/(a6 + a7)**9 - 480*a6**7*a7**6*(a6 - a7)/(a6 + a7)**9 - 840*a6**6*a7**7*(a6 - a7)/(a6 + a7)**9 - 1008*a6**5*a7**8*(a6 - a7)/(a6 + a7)**9 - 840*a6**4*a7**9*(a6 - a7)/(a6 + a7)**9 - 480*a6**3*a7**10*(a6 - a7)/(a6 + a7)**9 - 180*a6**2*a7**11*(a6 - a7)/(a6 + a7)**9 + 4*a6**2*a7**3 - 40*a6*a7**12*(a6 - a7)/(a6 + a7)**9 - 8*a6*a7**4 - 4*a7**13*(a6 - a7)/(a6 + a7)**9 + 4*a7**5)/(8*a6*a7**3 - 8*a7**4))/(a6 + a7)**9 - 4*a7**3*(a6 - a7)*log(T + (4*a6**10*a7**3*(a6 - a7)/(a6 + a7)**9 + 40*a6**9*a7**4*(a6 - a7)/(a6 + a7)**9 + 180*a6**8*a7**5*(a6 - a7)/(a6 + a7)**9 + 480*a6**7*a7**6*(a6 - a7)/(a6 + a7)**9 + 840*a6**6*a7**7*(a6 - a7)/(a6 + a7)**9 + 1008*a6**5*a7**8*(a6 - a7)/(a6 + a7)**9 + 840*a6**4*a7**9*(a6 - a7)/(a6 + a7)**9 + 480*a6**3*a7**10*(a6 - a7)/(a6 + a7)**9 + 180*a6**2*a7**11*(a6 - a7)/(a6 + a7)**9 + 4*a6**2*a7**3 + 40*a6*a7**12*(a6 - a7)/(a6 + a7)**9 - 8*a6*a7**4 + 4*a7**13*(a6 - a7)/(a6 + a7)**9 + 4*a7**5)/(8*a6*a7**3 - 8*a7**4))/(a6 + a7)**9 + (T**7*(420*a6*a7**3 - 420*a7**4) + T**6*(2730*a6**2*a7**3 - 2940*a6*a7**4 + 210*a7**5) + T**5*(7490*a6**3*a7**3 - 8890*a6**2*a7**4 + 1330*a6*a7**5 + 70*a7**6) + T**4*(11165*a6**4*a7**3 - 15120*a6**3*a7**4 + 3500*a6**2*a7**5 + 420*a6*a7**6 + 35*a7**7) + T**3*(-21*a6**8 - 168*a6**7*a7 - 588*a6**6*a7**2 + 8463*a6**5*a7**3 - 17213*a6**4*a7**4 + 3682*a6**3*a7**5 + 434*a6**2*a7**6 + 35*a6*a7**7) + T**2*(-7*a6**9 - 70*a6**8*a7 - 308*a6**7*a7**2 + 3899*a6**6*a7**3 - 11459*a6**5*a7**4 + 2282*a6**4*a7**5 + 266*a6**3*a7**6 + 21*a6**2*a7**7) + T*(-a6**10 - 6*a6**9*a7 - 22*a6**8*a7**2 + 1009*a6**7*a7**3 - 4159*a6**6*a7**4 + 778*a6**5*a7**5 + 90*a6**4*a7**6 + 7*a6**3*a7**7) + a6**10*a7 + 13*a6**9*a7**2 + 113*a6**8*a7**3 - 638*a6**7*a7**4 + 113*a6**6*a7**5 + 13*a6**5*a7**6 + a6**4*a7**7)/(T**8*(105*a6**8 + 840*a6**7*a7 + 2940*a6**6*a7**2 + 5880*a6**5*a7**3 + 7350*a6**4*a7**4 + 5880*a6**3*a7**5 + 2940*a6**2*a7**6 + 840*a6*a7**7 + 105*a7**8) + T**7*(735*a6**9 + 5775*a6**8*a7 + 19740*a6**7*a7**2 + 38220*a6**6*a7**3 + 45570*a6**5*a7**4 + 33810*a6**4*a7**5 + 14700*a6**3*a7**6 + 2940*a6**2*a7**7 - 105*a6*a7**8 - 105*a7**9) + T**6*(2205*a6**10 + 16905*a6**9*a7 + 55860*a6**8*a7**2 + 102900*a6**7*a7**3 + 113190*a6**6*a7**4 + 72030*a6**5*a7**5 + 20580*a6**4*a7**6 - 2940*a6**3*a7**7 - 3675*a6**2*a7**8 - 735*a6*a7**9) + T**5*(3675*a6**11 + 27195*a6**10*a7 + 85260*a6**9*a7**2 + 144060*a6**8*a7**3 + 133770*a6**7*a7**4 + 51450*a6**6*a7**5 - 20580*a6**5*a7**6 - 32340*a6**4*a7**7 - 13965*a6**3*a7**8 - 2205*a6**2*a7**9) + T**4*(3675*a6**12 + 25725*a6**11*a7 + 73500*a6**10*a7**2 + 102900*a6**9*a7**3 + 51450*a6**8*a7**4 - 51450*a6**7*a7**5 - 102900*a6**6*a7**6 - 73500*a6**5*a7**7 - 25725*a6**4*a7**8 - 3675*a6**3*a7**9) + T**3*(2205*a6**13 + 13965*a6**12*a7 + 32340*a6**11*a7**2 + 20580*a6**10*a7**3 - 51450*a6**9*a7**4 - 133770*a6**8*a7**5 - 144060*a6**7*a7**6 - 85260*a6**6*a7**7 - 27195*a6**5*a7**8 - 3675*a6**4*a7**9) + T**2*(735*a6**14 + 3675*a6**13*a7 + 2940*a6**12*a7**2 - 20580*a6**11*a7**3 - 72030*a6**10*a7**4 - 113190*a6**9*a7**5 - 102900*a6**8*a7**6 - 55860*a6**7*a7**7 - 16905*a6**6*a7**8 - 2205*a6**5*a7**9) + T*(105*a6**15 + 105*a6**14*a7 - 2940*a6**13*a7**2 - 14700*a6**12*a7**3 - 33810*a6**11*a7**4 - 45570*a6**10*a7**5 - 38220*a6**9*a7**6 - 19740*a6**8*a7**7 - 5775*a6**7*a7**8 - 735*a6**6*a7**9) - 105*a6**15*a7 - 840*a6**14*a7**2 - 2940*a6**13*a7**3 - 5880*a6**12*a7**4 - 7350*a6**11*a7**5 - 5880*a6**10*a7**6 - 2940*a6**9*a7**7 - 840*a6**8*a7**8 - 105*a6**7*a7**9))
        x18 = -70*a4*a7**4*(35*T**3 + 21*T**2*a6 + 7*T*a6**2 + a6**3)/(140*T**7 + 980*T**6*a6 + 2940*T**5*a6**2 + 4900*T**4*a6**3 + 4900*T**3*a6**4 + 2940*T**2*a6**5 + 980*T*a6**6 + 140*a6**7)
        s = x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15+x16+x17+x18
        s += a0*log(T) + (T*a1*a2 + a1*a2**2)*exp(-a2/T)/(T*a2**3)
        s += a3*a7**2*log(T)/a6**2 + a3*(a6 - a7)*(a6 + a7)*log(T + (-a3*a6*a7**2 + a3*a6*(a6 - a7)*(a6 + a7))/(a3*a6**2 - 2*a3*a7**2))/a6**2 + (a3*a6**2 + 2*a3*a6*a7 + a3*a7**2)/(T*a6 + a6**2)
        s *= R
        return s

#        s = first + second + third + fourth
    # Last line at least is correct
    return R*(J + a0*log(T) + a1/a2**2*(1 + a2/T)*exp(-a2/T) + s)
    
    
TRCIG = 'TRC Thermodynamics of Organic Compounds in the Gas State (1994)'
POLING = 'Poling et al. (2001)'
POLING_CONST = 'Poling et al. (2001) constant'
CRCSTD = 'CRC Standard Thermodynamic Properties of Chemical Substances'
VDI_TABULAR = 'VDI Heat Atlas'
LASTOVKA_SHAW = 'Lastovka and Shaw (2013)'
COOLPROP = 'CoolProp'
heat_capacity_gas_methods = [TRCIG, POLING, COOLPROP, LASTOVKA_SHAW, CRCSTD,
                             POLING_CONST, VDI_TABULAR]
'''Holds all methods available for the HeatCapacityGas class, for use in
iterating over them.'''


class HeatCapacityGas(TDependentProperty):
    r'''Class for dealing with gas heat capacity as a function of temperature.
    Consists of two coefficient-based methods, two constant methods,
    one tabular source, one simple estimator, and the external library
    CoolProp.

    Parameters
    ----------
    CASRN : str, optional
        The CAS number of the chemical
    MW : float, optional
        Molecular weight, [g/mol]
    similarity_variable : float, optional
        similarity variable, n_atoms/MW, [mol/g]

    Notes
    -----
    A string holding each method's name is assigned to the following variables
    in this module, intended as the most convenient way to refer to a method.
    To iterate over all methods, use the list stored in
    :obj:`heat_capacity_gas_methods`.

    **TRCIG**:
        A rigorous expression derived in [1]_ for modeling gas heat capacity.
        Coefficients for 1961 chemicals are available.
    **POLING**:
        Simple polynomials in [2]_ not suitable for extrapolation. Data is
        available for 308 chemicals.
    **COOLPROP**:
        CoolProp external library; with select fluids from its library.
        Range is limited to that of the equations of state it uses, as
        described in [3]_. Very slow.
    **LASTOVKA_SHAW**:
        A basic estimation method using the `similarity variable` concept;
        requires only molecular structure, so is very convenient. See
        :obj:`Lastovka_Shaw` for details.
    **CRCSTD**:
        Constant values tabulated in [4]_ at 298.15 K; data is available for
        533 gases.
    **POLING_CONST**:
        Constant values in [2]_ at 298.15 K; available for 348 gases.
    **VDI_TABULAR**:
        Tabular data up to the critical point available in [5]_. Note that this
        data is along the saturation curve.


    See Also
    --------
    TRCCp
    Lastovka_Shaw
    Rowlinson_Poling
    Rowlinson_Bondi

    References
    ----------
    .. [1] Kabo, G. J., and G. N. Roganov. Thermodynamics of Organic Compounds
       in the Gas State, Volume II: V. 2. College Station, Tex: CRC Press, 1994.
    .. [2] Poling, Bruce E. The Properties of Gases and Liquids. 5th edition.
       New York: McGraw-Hill Professional, 2000.
    .. [3] Bell, Ian H., Jorrit Wronski, Sylvain Quoilin, and Vincent Lemort.
       "Pure and Pseudo-Pure Fluid Thermophysical Property Evaluation and the
       Open-Source Thermophysical Property Library CoolProp." Industrial &
       Engineering Chemistry Research 53, no. 6 (February 12, 2014):
       2498-2508. doi:10.1021/ie4033999. http://www.coolprop.org/
    .. [4] Haynes, W.M., Thomas J. Bruno, and David R. Lide. CRC Handbook of
       Chemistry and Physics. [Boca Raton, FL]: CRC press, 2014.
    .. [5] Gesellschaft, V. D. I., ed. VDI Heat Atlas. 2nd edition.
       Berlin; New York:: Springer, 2010.
    '''
    name = 'gas heat capacity'
    units = 'J/mol/K'
    interpolation_T = None
    '''No interpolation transformation by default.'''
    interpolation_property = None
    '''No interpolation transformation by default.'''
    interpolation_property_inv = None
    '''No interpolation transformation by default.'''
    tabular_extrapolation_permitted = True
    '''Allow tabular extrapolation by default; gases are fairly linear in
    heat capacity at high temperatures even if not low temperatures.'''

    property_min = 0
    '''Heat capacities have a minimum value of 0 at 0 K.'''
    property_max = 1E4
    '''Maximum valid of Heat capacity; arbitrarily set. For fluids very near
    the critical point, this value can be obscenely high.'''


    ranked_methods = [TRCIG, POLING, COOLPROP, LASTOVKA_SHAW, CRCSTD, POLING_CONST, VDI_TABULAR]
    '''Default rankings of the available methods.'''

    def __init__(self, CASRN='', MW=None, similarity_variable=None):
        self.CASRN = CASRN
        self.MW = MW
        self.similarity_variable = similarity_variable

        self.Tmin = None
        '''Minimum temperature at which no method can calculate the
        surface tension under.'''
        self.Tmax = None
        '''Maximum temperature at which no method can calculate the
        surface tension above.'''

        self.tabular_data = {}
        '''tabular_data, dict: Stored (Ts, properties) for any
        tabular data; indexed by provided or autogenerated name.'''
        self.tabular_data_interpolators = {}
        '''tabular_data_interpolators, dict: Stored (extrapolator,
        spline) tuples which are interp1d instances for each set of tabular
        data; indexed by tuple of (name, interpolation_T,
        interpolation_property, interpolation_property_inv) to ensure that
        if an interpolation transform is altered, the old interpolator which
        had been created is no longer used.'''

        self.sorted_valid_methods = []
        '''sorted_valid_methods, list: Stored methods which were found valid
        at a specific temperature; set by `T_dependent_property`.'''
        self.user_methods = []
        '''user_methods, list: Stored methods which were specified by the user
        in a ranked order of preference; set by `T_dependent_property`.'''

        self.all_methods = set()
        '''Set of all methods available for a given CASRN and properties;
        filled by :obj:`load_all_methods`.'''

        self.load_all_methods()


    def load_all_methods(self):
        r'''Method which picks out coefficients for the specified chemical
        from the various dictionaries and DataFrames storing it. All data is
        stored as attributes. This method also sets :obj:`Tmin`, :obj:`Tmax`,
        and :obj:`all_methods` as a set of methods for which the data exists for.

        Called on initialization only. See the source code for the variables at
        which the coefficients are stored. The coefficients can safely be
        altered once the class is initialized. This method can be called again
        to reset the parameters.
        '''
        methods = []
        Tmins, Tmaxs = [], []
        if self.CASRN in TRC_gas_data.index:
            methods.append(TRCIG)
            _, self.TRCIG_Tmin, self.TRCIG_Tmax, a0, a1, a2, a3, a4, a5, a6, a7, _, _, _ = _TRC_gas_data_values[TRC_gas_data.index.get_loc(self.CASRN)].tolist()
            self.TRCIG_coefs = [a0, a1, a2, a3, a4, a5, a6, a7]
            Tmins.append(self.TRCIG_Tmin); Tmaxs.append(self.TRCIG_Tmax)
        if self.CASRN in Poling_data.index and not np.isnan(Poling_data.at[self.CASRN, 'a0']):
            _, self.POLING_Tmin, self.POLING_Tmax, a0, a1, a2, a3, a4, Cpg, Cpl = _Poling_data_values[Poling_data.index.get_loc(self.CASRN)].tolist()
            methods.append(POLING)
            self.POLING_coefs = [a0, a1, a2, a3, a4]
            Tmins.append(self.POLING_Tmin); Tmaxs.append(self.POLING_Tmax)
        if self.CASRN in Poling_data.index and not np.isnan(Poling_data.at[self.CASRN, 'Cpg']):
            methods.append(POLING_CONST)
            self.POLING_T = 298.15
            self.POLING_constant = float(Poling_data.at[self.CASRN, 'Cpg'])
        if self.CASRN in CRC_standard_data.index and not np.isnan(CRC_standard_data.at[self.CASRN, 'Cpg']):
            methods.append(CRCSTD)
            self.CRCSTD_T = 298.15
            self.CRCSTD_constant = float(CRC_standard_data.at[self.CASRN, 'Cpg'])
        if self.CASRN in _VDISaturationDict:
            # NOTE: VDI data is for the saturation curve, i.e. at increasing
            # pressure; it is normally substantially higher than the ideal gas
            # value
            methods.append(VDI_TABULAR)
            Ts, props = VDI_tabular_data(self.CASRN, 'Cp (g)')
            self.VDI_Tmin = Ts[0]
            self.VDI_Tmax = Ts[-1]
            self.tabular_data[VDI_TABULAR] = (Ts, props)
            Tmins.append(self.VDI_Tmin); Tmaxs.append(self.VDI_Tmax)
        if has_CoolProp and self.CASRN in coolprop_dict:
            methods.append(COOLPROP)
            self.CP_f = coolprop_fluids[self.CASRN]
            Tmins.append(self.CP_f.Tt); Tmaxs.append(self.CP_f.Tc)
        if self.MW and self.similarity_variable:
            methods.append(LASTOVKA_SHAW)
        self.all_methods = set(methods)
        if Tmins and Tmaxs:
            self.Tmin, self.Tmax = min(Tmins), max(Tmaxs)


    def calculate(self, T, method):
        r'''Method to calculate surface tension of a liquid at temperature `T`
        with a given method.

        This method has no exception handling; see `T_dependent_property`
        for that.

        Parameters
        ----------
        T : float
            Temperature at which to calculate heat capacity, [K]
        method : str
            Method name to use

        Returns
        -------
        Cp : float
            Calculated heat capacity, [J/mol/K]
        '''
        if method == TRCIG:
            Cp = TRCCp(T, *self.TRCIG_coefs)
        elif method == COOLPROP:
            Cp = PropsSI('Cp0molar', 'T', T,'P', 101325.0, self.CASRN)
        elif method == POLING:
            Cp = R*(self.POLING_coefs[0] + self.POLING_coefs[1]*T
            + self.POLING_coefs[2]*T**2 + self.POLING_coefs[3]*T**3
            + self.POLING_coefs[4]*T**4)
        elif method == POLING_CONST:
            Cp = self.POLING_constant
        elif method == CRCSTD:
            Cp = self.CRCSTD_constant
        elif method == LASTOVKA_SHAW:
            Cp = Lastovka_Shaw(T, self.similarity_variable)
            Cp = property_mass_to_molar(Cp, self.MW)
        elif method in self.tabular_data:
            Cp = self.interpolate(T, method)
        return Cp


    def test_method_validity(self, T, method):
        r'''Method to test the validity of a specified method for a given
        temperature.

        'TRC' and 'Poling' both have minimum and maimum temperatures. The
        constant temperatures in POLING_CONST and CRCSTD are considered valid
        for 50 degrees around their specified temperatures.
        :obj:`Lastovka_Shaw` is considered valid for the whole range of
        temperatures.

        It is not guaranteed that a method will work or give an accurate
        prediction simply because this method considers the method valid.

        Parameters
        ----------
        T : float
            Temperature at which to determine the validity of the method, [K]
        method : str
            Name of the method to test

        Returns
        -------
        validity : bool
            Whether or not a specifid method is valid
        '''
        validity = True
        if method == TRCIG:
            if T < self.TRCIG_Tmin or T > self.TRCIG_Tmax:
                validity = False
        elif method == POLING:
            if T < self.POLING_Tmin or T > self.POLING_Tmax:
                validity = False
        elif method == POLING_CONST:
            if T > self.POLING_T + 50 or T < self.POLING_T - 50:
                validity = False
        elif method == CRCSTD:
            if T > self.CRCSTD_T + 50 or T < self.CRCSTD_T - 50:
                validity = False
        elif method == LASTOVKA_SHAW:
            pass # Valid everywhere
        elif method == COOLPROP:
            if T <= self.CP_f.Tmin or T >= self.CP_f.Tmax:
                validity = False
        elif method in self.tabular_data:
            # if tabular_extrapolation_permitted, good to go without checking
            if not self.tabular_extrapolation_permitted:
                Ts, properties = self.tabular_data[method]
                if T < Ts[0] or T > Ts[-1]:
                    validity = False
        else:
            raise Exception('Method not valid')
        return validity

    def calculate_integral(self, T1, T2, method):
        r'''Method to calculate the integral of a property with respect to
        temperature, using a specified method. Implements the analytical
        integrals of all available methods except for tabular data.
        
        Parameters
        ----------
        T1 : float
            Lower limit of integration, [K]
        T2 : float
            Upper limit of integration, [K]
        method : str
            Method for which to find the integral

        Returns
        -------
        integral : float
            Calculated integral of the property over the given range, 
            [`units*K`]
        '''
        if method == TRCIG:
            H2 = TRCCp_integral(T2, *self.TRCIG_coefs)
            H1 = TRCCp_integral(T1, *self.TRCIG_coefs)
            return H2 - H1
        elif method == POLING:
            A, B, C, D, E = self.POLING_coefs
            H2 = (((((0.2*E)*T2 + 0.25*D)*T2 + C/3.)*T2 + 0.5*B)*T2 + A)*T2
            H1 = (((((0.2*E)*T1 + 0.25*D)*T1 + C/3.)*T1 + 0.5*B)*T1 + A)*T1
            return R*(H2 - H1)
        elif method == POLING_CONST:
            return (T2 - T1)*self.POLING_constant
        elif method == CRCSTD:
            return (T2 - T1)*self.CRCSTD_constant
        elif method == LASTOVKA_SHAW:
            dH = (Lastovka_Shaw_integral(T2, self.similarity_variable)
                    - Lastovka_Shaw_integral(T1, self.similarity_variable))
            return property_mass_to_molar(dH, self.MW)
        elif method in self.tabular_data or method == COOLPROP:
            return float(quad(self.calculate, T1, T2, args=(method))[0])
        else:
            raise Exception('Method not valid')


#    def calculate_integral_over_T(self, T1, T2, method):
#        r'''Method to calculate the integral of a property over temperature
#        with respect to temperature, using a specified method. Implements the 
#        analytical integrals of all available methods except for tabular data.
#        
#        Parameters
#        ----------
#        T1 : float
#            Lower limit of integration, [K]
#        T2 : float
#            Upper limit of integration, [K]
#        method : str
#            Method for which to find the integral
#
#        Returns
#        -------
#        integral : float
#            Calculated integral of the property over the given range, 
#            [`units`]
#        '''
##        if method == TRCIG:
##            H2 = TRCCp_integral(T2, *self.TRCIG_coefs)
##            H1 = TRCCp_integral(T1, *self.TRCIG_coefs)
##            return H2 - H1
##        if method == PERRY151:
##            S2 = (self.PERRY151_const*log(T2) + self.PERRY151_lin*T2 
##                  - self.PERRY151_quadinv/(2.*T2**2) + 0.5*self.PERRY151_quad*T2**2)
##            S1 = (self.PERRY151_const*log(T1) + self.PERRY151_lin*T1
##                  - self.PERRY151_quadinv/(2.*T1**2) + 0.5*self.PERRY151_quad*T1**2)
##            return (S2 - S1)*calorie
##        elif method == CRCSTD:
##            S2 = self.CRCSTD_Cp*log(T2)
##            S1 = self.CRCSTD_Cp*log(T1)
##            return (S2 - S1)
##        elif method == LASTOVKA_S:
##            dS = (Lastovka_solid_integral_over_T(T2, self.similarity_variable)
##                    - Lastovka_solid_integral_over_T(T1, self.similarity_variable))
##            return property_mass_to_molar(dS, self.MW)
#        elif method in self.tabular_data:
#            return float(quad(lambda T: self.calculate(T, method)/T, T1, T2)[0])
#        else:
#            raise Exception('Method not valid')


### Heat capacities of liquids

def Rowlinson_Poling(T, Tc, omega, Cpgm):
    r'''Calculate liquid constant-pressure heat capacitiy with the [1]_ CSP method.

    This equation is not terrible accurate.

    The heat capacity of a liquid is given by:

    .. math::
        \frac{Cp^{L} - Cp^{g}}{R} = 1.586 + \frac{0.49}{1-T_r} +
        \omega\left[ 4.2775 + \frac{6.3(1-T_r)^{1/3}}{T_r} + \frac{0.4355}{1-T_r}\right]

    Parameters
    ----------
    T : float
        Temperature of fluid [K]
    Tc : float
        Critical temperature of fluid [K]
    omega : float
        Acentric factor for fluid, [-]
    Cpgm : float
        Constant-pressure gas heat capacity, [J/mol/K]

    Returns
    -------
    Cplm : float
        Liquid constant-pressure heat capacitiy, [J/mol/K]

    Notes
    -----
    Poling compared 212 substances, and found error at 298K larger than 10%
    for 18 of them, mostly associating. Of the other 194 compounds, AARD is 2.5%.

    Examples
    --------
    >>> Rowlinson_Poling(350.0, 435.5, 0.203, 91.21)
    143.80194441498296

    References
    ----------
    .. [1] Poling, Bruce E. The Properties of Gases and Liquids. 5th edition.
       New York: McGraw-Hill Professional, 2000.
    '''
    Tr = T/Tc
    Cplm = Cpgm+ R*(1.586 + 0.49/(1.-Tr) + omega*(4.2775
    + 6.3*(1-Tr)**(1/3.)/Tr + 0.4355/(1.-Tr)))
    return Cplm


def Rowlinson_Bondi(T, Tc, omega, Cpgm):
    r'''Calculate liquid constant-pressure heat capacitiy with the CSP method
    shown in [1]_.

    The heat capacity of a liquid is given by:

    .. math::
        \frac{Cp^L - Cp^{ig}}{R} = 1.45 + 0.45(1-T_r)^{-1} + 0.25\omega
        [17.11 + 25.2(1-T_r)^{1/3}T_r^{-1} + 1.742(1-T_r)^{-1}]

    Parameters
    ----------
    T : float
        Temperature of fluid [K]
    Tc : float
        Critical temperature of fluid [K]
    omega : float
        Acentric factor for fluid, [-]
    Cpgm : float
        Constant-pressure gas heat capacity, [J/mol/K]

    Returns
    -------
    Cplm : float
        Liquid constant-pressure heat capacitiy, [J/mol/K]

    Notes
    -----
    Less accurate than `Rowlinson_Poling`.

    Examples
    --------
    >>> Rowlinson_Bondi(T=373.28, Tc=535.55, omega=0.323, Cpgm=119.342)
    175.39760730048116

    References
    ----------
    .. [1] Poling, Bruce E. The Properties of Gases and Liquids. 5th edition.
       New York: McGraw-Hill Professional, 2000.
    .. [2] Gesellschaft, V. D. I., ed. VDI Heat Atlas. 2nd edition.
       Berlin; New York:: Springer, 2010.
    .. [3] J.S. Rowlinson, Liquids and Liquid Mixtures, 2nd Ed.,
       Butterworth, London (1969).
    '''
    Tr = T/Tc
    Cplm = Cpgm + R*(1.45 + 0.45/(1.-Tr) + 0.25*omega*(17.11
    + 25.2*(1-Tr)**(1/3.)/Tr + 1.742/(1.-Tr)))
    return Cplm


def Dadgostar_Shaw(T, similarity_variable):
    r'''Calculate liquid constant-pressure heat capacitiy with the similarity
    variable concept and method as shown in [1]_.

    .. math::
        C_{p} = 24.5(a_{11}\alpha + a_{12}\alpha^2)+ (a_{21}\alpha
        + a_{22}\alpha^2)T +(a_{31}\alpha + a_{32}\alpha^2)T^2

    Parameters
    ----------
    T : float
        Temperature of liquid [K]
    similarity_variable : float
        similarity variable as defined in [1]_, [mol/g]

    Returns
    -------
    Cpl : float
        Liquid constant-pressure heat capacitiy, [J/kg/K]

    Notes
    -----
    Many restrictions on its use.

    Original model is in terms of J/g/K. Note that the model is for predicting
    mass heat capacity, not molar heat capacity like most other methods!

    a11 = -0.3416; a12 = 2.2671; a21 = 0.1064; a22 = -0.3874l;
    a31 = -9.8231E-05; a32 = 4.182E-04

    Examples
    --------
    >>> Dadgostar_Shaw(355.6, 0.139)
    1802.5291501191516

    References
    ----------
    .. [1] Dadgostar, Nafiseh, and John M. Shaw. "A Predictive Correlation for
       the Constant-Pressure Specific Heat Capacity of Pure and Ill-Defined
       Liquid Hydrocarbons." Fluid Phase Equilibria 313 (January 15, 2012):
       211-226. doi:10.1016/j.fluid.2011.09.015.
    '''
    a11 = -0.3416
    a12 = 2.2671
    a21 = 0.1064
    a22 = -0.3874
    a31 = -9.8231E-05
    a32 = 4.182E-04

    # Didn't seem to improve the comparison; sum of errors on some
    # points included went from 65.5  to 286.
    # Author probably used more precision in their calculation.
#    theta = 151.8675
#    constant = 3*R*(theta/T)**2*exp(theta/T)/(exp(theta/T)-1)**2
    constant = 24.5

    Cp = (constant*(a11*similarity_variable + a12*similarity_variable**2)
    + (a21*similarity_variable + a22*similarity_variable**2)*T
    + (a31*similarity_variable + a32*similarity_variable**2)*T**2)
    Cp = Cp*1000 # J/g/K to J/kg/K
    return Cp


_ZabranskySats = {}
_ZabranskyConsts = {}
_ZabranskyIsos = {}

_ZabranskySatp = {}
_ZabranskyConstp = {}
_ZabranskyIsop = {}


def _append2dict(maindict, newdict):
    '''
    Inputs: Dict entry or []; and the dict type
    '''
    data = None
    for datum in maindict:  # list of dicts
        if newdict["Tmin"] < datum["Tmin"]:
            data = maindict  # list of dicts
            data.insert(data.index(datum), newdict)
            break
    if not data:  # Run if Tmin never under Tmins in dict (put at end)
        data = maindict
        data.extend([newdict])
    return data


with open(os.path.join(folder, 'Zabransky.csv'), encoding='utf-8') as f:
    next(f)
    for line in f:
        values = to_num(line.strip('\n').split('\t'))
        # s for spline, p for quasipolynomial
        (CASRN, _name, Type, Uncertainty, Tmin, Tmax, a1s, a2s, a3s, a4s, a1p, a2p, a3p, a4p, a5p, a6p, Tc) = values

        _ZabranskyDict = {"name" : _name , "Type" : Type,
        "Uncertainty" : Uncertainty, "Tmin": Tmin, "Tmax" : Tmax, "a1s" : a1s,
        "a2s" : a2s, "a3s": a3s, "a4s" : a4s, "a1p" : a1p, "a2p" : a2p,
        "a3p" : a3p, "a4p" : a4p,  "a5p" : a5p, "a6p" : a6p, "Tc" : Tc }
        # dict[CASRN] = [subdict1, subdict2] where each is sorted
        if Type == 'sat':
            if a1s: # sat, spline ONLY
                _ZabranskySats[CASRN] = _append2dict((_ZabranskySats[CASRN] if CASRN in _ZabranskySats else []), _ZabranskyDict)
            elif a1p: # sat, polynomial ONLY
                _ZabranskySatp[CASRN] = _append2dict((_ZabranskySatp[CASRN] if CASRN in _ZabranskySatp else []), _ZabranskyDict)
        elif Type == 'p':
            if a1s: # sat, spline ONLY
                _ZabranskyConsts[CASRN] = _append2dict((_ZabranskyConsts[CASRN] if CASRN in _ZabranskyConsts else []), _ZabranskyDict)
            elif a1p: # sat, polynomial ONLY
                _ZabranskyConstp[CASRN] = _append2dict((_ZabranskyConstp[CASRN] if CASRN in _ZabranskyConstp else []), _ZabranskyDict)
        elif Type == 'C':
            if a1s: # sat, spline ONLY
                _ZabranskyIsos[CASRN] = _append2dict((_ZabranskyIsos[CASRN] if CASRN in _ZabranskyIsos else []), _ZabranskyDict)
            elif a1p: # sat, polynomial ONLY
                _ZabranskyIsop[CASRN] = _append2dict((_ZabranskyIsop[CASRN] if CASRN in _ZabranskyIsop else []), _ZabranskyDict)



def Zabransky_quasi_polynomial(T, Tc, a1, a2, a3, a4, a5, a6):
    r'''Calculates liquid heat capacity using the model developed in [1]_.

    .. math::
        \frac{C}{R}=A_1\ln(1-T_r) + \frac{A_2}{1-T_r}
        + \sum_{j=0}^m A_{j+3} T_r^j

    Parameters
    ----------
    T : float
        Temperature [K]
    Tc : float
        Critical temperature of fluid, [K]
    a1-a6 : float
        Coefficients

    Returns
    -------
    Cp : float
        Liquid heat capacity, [J/mol/K]

    Notes
    -----
    Used only for isobaric heat capacities, not saturation heat capacities.
    Designed for reasonable extrapolation behavior caused by using the reduced
    critical temperature. Used by the authors of [1]_ when critical temperature
    was available for the fluid.
    Analytical integrals are available for this expression.

    Examples
    --------
    >>> Zabransky_quasi_polynomial(330, 591.79, -3.12743, 0.0857315, 13.7282, 1.28971, 6.42297, 4.10989)
    165.4728226923247

    References
    ----------
    .. [1] Zabransky, M., V. Ruzicka Jr, V. Majer, and Eugene S. Domalski.
       Heat Capacity of Liquids: Critical Review and Recommended Values.
       2 Volume Set. Washington, D.C.: Amer Inst of Physics, 1996.
    '''
    Tr = T/Tc
    return R*(a1*log(1-Tr) + a2/(1-Tr) + a3 + a4*Tr + a5*Tr**2 + a6*Tr**3)


def Zabransky_cubic(T, a1, a2, a3, a4):
    r'''Calculates liquid heat capacity using the model developed in [1]_.

    .. math::
        \frac{C}{R}=\sum_{j=0}^3 A_{j+1} \left(\frac{T}{100}\right)^j

    Parameters
    ----------
    T : float
        Temperature [K]
    a1-a4 : float
        Coefficients

    Returns
    -------
    Cp : float
        Liquid heat capacity, [J/mol/K]

    Notes
    -----
    Most often form used in [1]_.
    Analytical integrals are available for this expression.

    Examples
    --------
    >>> Zabransky_cubic(298.15, 20.9634, -10.1344, 2.8253, -0.256738)
    75.31462591538555

    References
    ----------
    .. [1] Zabransky, M., V. Ruzicka Jr, V. Majer, and Eugene S. Domalski.
       Heat Capacity of Liquids: Critical Review and Recommended Values.
       2 Volume Set. Washington, D.C.: Amer Inst of Physics, 1996.
    '''
    T = T/100.
#    return R*(a1 + a2*T + a3*T**2 + a4*T**3)
    return R*(((a4*T + a3)*T + a2)*T + a1)


def _ZabranskyDictChoser(T, diclist, strict=False):
    ans = None
    if len(diclist) == 1: # one entry
            ans = diclist[0]
    else:
        for data in diclist:
            if T < data["Tmin"]: # multiple entries, under Tmin
                ans = data
                break
            elif T >= data["Tmin"] and T <= data["Tmax"]: # Tmin < T < Tmax
                ans = data
                break
        if not ans:
            ans = diclist[-1] # last entry; T > Tmax, last case

#    if strict:
#        if T < ans["Tmin"] or T > ans["Tmax"]: # either side error
#            ans = None
    return ans





POST_CRITICAL = 'Post-critical'
ZABRANSKY_SPLINE = 'Zabransky spline'
ZABRANSKY_QUASIPOLYNOMIAL = 'Zabransky quasipolynomial'
ZABRANSKY_SPLINE_C = 'Zabransky spline, C'
ZABRANSKY_QUASIPOLYNOMIAL_C = 'Zabransky quasipolynomial, C'
ZABRANSKY_SPLINE_SAT = 'Zabransky spline, saturation'
ZABRANSKY_QUASIPOLYNOMIAL_SAT = 'Zabransky quasipolynomial, saturation'
ROWLINSON_POLING = 'Rowlinson and Poling (2001)'
ROWLINSON_BONDI = 'Rowlinson and Bondi (1969)'
DADGOSTAR_SHAW = 'Dadgostar and Shaw (2011)'


ZABRANSKY_TO_DICT = {ZABRANSKY_SPLINE: _ZabranskyConsts,
                     ZABRANSKY_QUASIPOLYNOMIAL: _ZabranskyConstp,
                     ZABRANSKY_SPLINE_C: _ZabranskyIsos,
                     ZABRANSKY_QUASIPOLYNOMIAL_C: _ZabranskyIsop,
                     ZABRANSKY_SPLINE_SAT: _ZabranskySats,
                     ZABRANSKY_QUASIPOLYNOMIAL_SAT: _ZabranskySatp}
heat_capacity_liquid_methods = [ZABRANSKY_SPLINE, ZABRANSKY_QUASIPOLYNOMIAL,
                      ZABRANSKY_SPLINE_C, ZABRANSKY_QUASIPOLYNOMIAL_C,
                      ZABRANSKY_SPLINE_SAT, ZABRANSKY_QUASIPOLYNOMIAL_SAT,
                      VDI_TABULAR, ROWLINSON_POLING, ROWLINSON_BONDI, COOLPROP,
                      DADGOSTAR_SHAW, POLING_CONST, CRCSTD]
'''Holds all methods available for the HeatCapacityLiquid class, for use in
iterating over them.'''


class HeatCapacityLiquid(TDependentProperty):
    r'''Class for dealing with liquid heat capacity as a function of temperature.
    Consists of six coefficient-based methods, two constant methods,
    one tabular source, two CSP methods based on gas heat capacity, one simple
    estimator, and the external library CoolProp.

    Parameters
    ----------
    CASRN : str, optional
        The CAS number of the chemical
    MW : float, optional
        Molecular weight, [g/mol]
    similarity_variable : float, optional
        similarity variable, n_atoms/MW, [mol/g]
    Tc : float, optional
        Critical temperature, [K]
    omega : float, optional
        Acentric factor, [-]
    Cpgm : float or callable, optional
        Idea-gas molar heat capacity at T or callable for the same, [J/mol/K]

    Notes
    -----
    A string holding each method's name is assigned to the following variables
    in this module, intended as the most convenient way to refer to a method.
    To iterate over all methods, use the list stored in
    :obj:`heat_capacity_gas_methods`.

    **ZABRANSKY_SPLINE, ZABRANSKY_QUASIPOLYNOMIAL, ZABRANSKY_SPLINE_C,
    and ZABRANSKY_QUASIPOLYNOMIAL_C**:
        Rigorous expressions developed in [1]_ following critical evaluation
        of the available data. The spline methods use the form described in
        :obj:`Zabransky_cubic` over short ranges with varying coefficients
        to obtain a wider range. The quasi-polynomial methods use the form
        described in :obj:`Zabransky_quasi_polynomial`, more suitable for
        extrapolation, and over then entire range. Respectively, there is data
        available for 588, 146, 51, and 26 chemicals.
    **ZABRANSKY_SPLINE_SAT and ZABRANSKY_QUASIPOLYNOMIAL_SAT**:
        Rigorous expressions developed in [1]_ following critical evaluation
        of the available data. The spline method use the form described in
        :obj:`Zabransky_cubic` over short ranges with varying coefficients
        to obtain a wider range. The quasi-polynomial method use the form
        described in :obj:`Zabransky_quasi_polynomial`, more suitable for
        extrapolation, and over then entire range. Respectively, there is data
        available for 203, and 16 chemicals. Note that these methods are for
        the saturation curve!
    **VDI_TABULAR**:
        Tabular data up to the critical point available in [5]_. Note that this
        data is along the saturation curve.
    **ROWLINSON_POLING**:
        CSP method described in :obj:`Rowlinson_Poling`. Requires a ideal gas
        heat capacity value at the same temperature as it is to be calculated.
    **ROWLINSON_BONDI**:
        CSP method described in :obj:`Rowlinson_Bondi`. Requires a ideal gas
        heat capacity value at the same temperature as it is to be calculated.
    **COOLPROP**:
        CoolProp external library; with select fluids from its library.
        Range is limited to that of the equations of state it uses, as
        described in [3]_. Very slow.
    **DADGOSTAR_SHAW**:
        A basic estimation method using the `similarity variable` concept;
        requires only molecular structure, so is very convenient. See
        :obj:`Dadgostar_Shaw` for details.
    **POLING_CONST**:
        Constant values in [2]_ at 298.15 K; available for 245 liquids.
    **CRCSTD**:
        Consta values tabulated in [4]_ at 298.15 K; data is available for 433
        liquids.

    See Also
    --------
    Zabransky_quasi_polynomial
    Zabransky_cubic
    Rowlinson_Poling
    Rowlinson_Bondi
    Dadgostar_Shaw

    References
    ----------
    .. [1] Zabransky, M., V. Ruzicka Jr, V. Majer, and Eugene S. Domalski.
       Heat Capacity of Liquids: Critical Review and Recommended Values.
       2 Volume Set. Washington, D.C.: Amer Inst of Physics, 1996.
    .. [2] Poling, Bruce E. The Properties of Gases and Liquids. 5th edition.
       New York: McGraw-Hill Professional, 2000.
    .. [3] Bell, Ian H., Jorrit Wronski, Sylvain Quoilin, and Vincent Lemort.
       "Pure and Pseudo-Pure Fluid Thermophysical Property Evaluation and the
       Open-Source Thermophysical Property Library CoolProp." Industrial &
       Engineering Chemistry Research 53, no. 6 (February 12, 2014):
       2498-2508. doi:10.1021/ie4033999. http://www.coolprop.org/
    .. [4] Haynes, W.M., Thomas J. Bruno, and David R. Lide. CRC Handbook of
       Chemistry and Physics. [Boca Raton, FL]: CRC press, 2014.
    .. [5] Gesellschaft, V. D. I., ed. VDI Heat Atlas. 2nd edition.
       Berlin; New York:: Springer, 2010.
    '''
    name = 'Liquid heat capacity'
    units = 'J/mol/K'
    interpolation_T = None
    '''No interpolation transformation by default.'''
    interpolation_property = None
    '''No interpolation transformation by default.'''
    interpolation_property_inv = None
    '''No interpolation transformation by default.'''
    tabular_extrapolation_permitted = False
    '''Disallow tabular extrapolation by default; higher-temeprature behavior
    is not well predicted by most extrapolation.'''

    property_min = 1
    '''Allow very low heat capacities; arbitrarily set; liquid heat capacity
    should always be somewhat substantial.'''
    property_max = 1E4 # Originally 1E4
    '''Maximum valid of Heat capacity; arbitrarily set. For fluids very near
    the critical point, this value can be obscenely high.'''


    ranked_methods = [ZABRANSKY_SPLINE, ZABRANSKY_QUASIPOLYNOMIAL,
                      ZABRANSKY_SPLINE_C, ZABRANSKY_QUASIPOLYNOMIAL_C,
                      ZABRANSKY_SPLINE_SAT, ZABRANSKY_QUASIPOLYNOMIAL_SAT,
                      VDI_TABULAR, ROWLINSON_POLING, ROWLINSON_BONDI,
                      COOLPROP, DADGOSTAR_SHAW, POLING_CONST, CRCSTD]
    '''Default rankings of the available methods.'''


    def __init__(self, CASRN='', MW=None, similarity_variable=None, Tc=None,
                 omega=None, Cpgm=None):
        self.CASRN = CASRN
        self.MW = MW
        self.Tc = Tc
        self.omega = omega
        self.Cpgm = Cpgm
        self.similarity_variable = similarity_variable

        self.Tmin = None
        '''Minimum temperature at which no method can calculate the
        heat capacity under.'''
        self.Tmax = None
        '''Maximum temperature at which no method can calculate the
        heat capacity above.'''

        self.tabular_data = {}
        '''tabular_data, dict: Stored (Ts, properties) for any
        tabular data; indexed by provided or autogenerated name.'''
        self.tabular_data_interpolators = {}
        '''tabular_data_interpolators, dict: Stored (extrapolator,
        spline) tuples which are interp1d instances for each set of tabular
        data; indexed by tuple of (name, interpolation_T,
        interpolation_property, interpolation_property_inv) to ensure that
        if an interpolation transform is altered, the old interpolator which
        had been created is no longer used.'''

        self.sorted_valid_methods = []
        '''sorted_valid_methods, list: Stored methods which were found valid
        at a specific temperature; set by `T_dependent_property`.'''
        self.user_methods = []
        '''user_methods, list: Stored methods which were specified by the user
        in a ranked order of preference; set by `T_dependent_property`.'''

        self.all_methods = set()
        '''Set of all methods available for a given CASRN and properties;
        filled by :obj:`load_all_methods`.'''

        self.load_all_methods()


    def load_all_methods(self):
        r'''Method which picks out coefficients for the specified chemical
        from the various dictionaries and DataFrames storing it. All data is
        stored as attributes. This method also sets :obj:`Tmin`, :obj:`Tmax`,
        and :obj:`all_methods` as a set of methods for which the data exists for.

        Called on initialization only. See the source code for the variables at
        which the coefficients are stored. The coefficients can safely be
        altered once the class is initialized. This method can be called again
        to reset the parameters.
        '''
        methods = []
        Tmins, Tmaxs = [], []
        if self.CASRN in _ZabranskyConsts:
            methods.append(ZABRANSKY_SPLINE)
            self.ZABRANSKY_SPLINE_data = _ZabranskyConsts[self.CASRN]
        if self.CASRN in _ZabranskyConstp:
            methods.append(ZABRANSKY_QUASIPOLYNOMIAL)
            self.ZABRANSKY_QUASIPOLYNOMIAL_data = _ZabranskyConstp[self.CASRN]
        if self.CASRN in _ZabranskyIsos:
            methods.append(ZABRANSKY_SPLINE_C)
            self.ZABRANSKY_SPLINE_C_data = _ZabranskyIsos[self.CASRN]
        if self.CASRN in _ZabranskyIsop:
            methods.append(ZABRANSKY_QUASIPOLYNOMIAL_C)
            self.ZABRANSKY_QUASIPOLYNOMIAL_C_data = _ZabranskyIsop[self.CASRN]
        if self.CASRN in Poling_data.index and not np.isnan(Poling_data.at[self.CASRN, 'Cpl']):
            methods.append(POLING_CONST)
            self.POLING_T = 298.15
            self.POLING_constant = float(Poling_data.at[self.CASRN, 'Cpl'])
        if self.CASRN in CRC_standard_data.index and not np.isnan(CRC_standard_data.at[self.CASRN, 'Cpl']):
            methods.append(CRCSTD)
            self.CRCSTD_T = 298.15
            self.CRCSTD_constant = float(CRC_standard_data.at[self.CASRN, 'Cpl'])
        # Saturation functions
        if self.CASRN in _ZabranskySats:
            methods.append(ZABRANSKY_SPLINE_SAT)
            self.ZABRANSKY_SPLINE_SAT_data = _ZabranskySats[self.CASRN]
        if self.CASRN in _ZabranskySatp:
            methods.append(ZABRANSKY_QUASIPOLYNOMIAL_SAT)
            self.ZABRANSKY_QUASIPOLYNOMIAL_SAT_data = _ZabranskySatp[self.CASRN]
        if self.CASRN in _VDISaturationDict:
            # NOTE: VDI data is for the saturation curve, i.e. at increasing
            # pressure; it is normally substantially higher than the ideal gas
            # value
            methods.append(VDI_TABULAR)
            Ts, props = VDI_tabular_data(self.CASRN, 'Cp (l)')
            self.VDI_Tmin = Ts[0]
            self.VDI_Tmax = Ts[-1]
            self.tabular_data[VDI_TABULAR] = (Ts, props)
            Tmins.append(self.VDI_Tmin); Tmaxs.append(self.VDI_Tmax)
        if self.Tc and self.omega:
            methods.extend([ROWLINSON_POLING, ROWLINSON_BONDI])
        if has_CoolProp and self.CASRN in coolprop_dict:
            methods.append(COOLPROP)
            self.CP_f = coolprop_fluids[self.CASRN]
            Tmins.append(self.CP_f.Tt); Tmaxs.append(self.CP_f.Tc)
        if self.MW and self.similarity_variable:
            methods.append(DADGOSTAR_SHAW)
        self.all_methods = set(methods)
        if Tmins and Tmaxs:
            # TODO: More Tmin, Tmax ranges
            self.Tmin, self.Tmax = min(Tmins), max(Tmaxs)


    def calculate(self, T, method):
        r'''Method to calculate heat capacity of a liquid at temperature `T`
        with a given method.

        This method has no exception handling; see `T_dependent_property`
        for that.

        Parameters
        ----------
        T : float
            Temperature at which to calculate heat capacity, [K]
        method : str
            Name of the method to use

        Returns
        -------
        Cp : float
            Heat capacity of the liquid at T, [J/mol/K]
        '''
        if method == ZABRANSKY_SPLINE:
            data = _ZabranskyDictChoser(T, self.ZABRANSKY_SPLINE_data)
            Cp = Zabransky_cubic(T, data["a1s"], data["a2s"], data["a3s"], data["a4s"])
        elif method == ZABRANSKY_QUASIPOLYNOMIAL:
            data = _ZabranskyDictChoser(T, self.ZABRANSKY_QUASIPOLYNOMIAL_data)
            Cp = Zabransky_quasi_polynomial(T, data["Tc"], data["a1p"], data["a2p"], data["a3p"], data["a4p"], data["a5p"], data["a6p"])
        elif method == ZABRANSKY_SPLINE_C:
            data = _ZabranskyDictChoser(T,self.ZABRANSKY_SPLINE_C_data)
            Cp = Zabransky_cubic(T, data["a1s"], data["a2s"], data["a3s"], data["a4s"])
        elif method == ZABRANSKY_QUASIPOLYNOMIAL_C:
            data = _ZabranskyDictChoser(T, self.ZABRANSKY_QUASIPOLYNOMIAL_C_data)
            Cp = Zabransky_quasi_polynomial(T, data["Tc"], data["a1p"], data["a2p"], data["a3p"], data["a4p"], data["a5p"], data["a6p"])
        elif method == ZABRANSKY_SPLINE_SAT:
            data = _ZabranskyDictChoser(T, self.ZABRANSKY_SPLINE_SAT_data)
            Cp = Zabransky_cubic(T, data["a1s"], data["a2s"], data["a3s"], data["a4s"])
        elif method == ZABRANSKY_QUASIPOLYNOMIAL_SAT:
            data = _ZabranskyDictChoser(T, self.ZABRANSKY_QUASIPOLYNOMIAL_SAT_data)
            Cp = Zabransky_quasi_polynomial(T, data["Tc"], data["a1p"], data["a2p"], data["a3p"], data["a4p"], data["a5p"], data["a6p"])
        elif method == COOLPROP:
            Cp = CoolProp_T_dependent_property(T, self.CASRN , 'CPMOLAR', 'l')
        elif method == POLING_CONST:
            Cp = self.POLING_constant
        elif method == CRCSTD:
            Cp = self.CRCSTD_constant
        elif method == ROWLINSON_POLING:
            Cpgm = self.Cpgm(T) if hasattr(self.Cpgm, '__call__') else self.Cpgm
            Cp = Rowlinson_Poling(T, self.Tc, self.omega, Cpgm)
        elif method == ROWLINSON_BONDI:
            Cpgm = self.Cpgm(T) if hasattr(self.Cpgm, '__call__') else self.Cpgm
            Cp = Rowlinson_Bondi(T, self.Tc, self.omega, Cpgm)
        elif method == DADGOSTAR_SHAW:
            Cp = Dadgostar_Shaw(T, self.similarity_variable)
            Cp = property_mass_to_molar(Cp, self.MW)
        elif method in self.tabular_data:
            Cp = self.interpolate(T, method)
        return Cp


    def test_method_validity(self, T, method):
        r'''Method to check the validity of a method. Follows the given
        ranges for all coefficient-based methods. For the CSP method
        :obj:`Rowlinson_Poling`, the model is considered valid for all
        temperatures. The simple method :obj:`Dadgostar_Shaw` is considered
        valid for all temperatures. For tabular data,
        extrapolation outside of the range is used if
        :obj:`tabular_extrapolation_permitted` is set; if it is, the
        extrapolation is considered valid for all temperatures.

        It is not guaranteed that a method will work or give an accurate
        prediction simply because this method considers the method valid.

        Parameters
        ----------
        T : float
            Temperature at which to test the method, [K]
        method : str
            Name of the method to test

        Returns
        -------
        validity : bool
            Whether or not a method is valid
        '''
        validity = True
        if method in [ZABRANSKY_SPLINE, ZABRANSKY_QUASIPOLYNOMIAL,
                      ZABRANSKY_SPLINE_C, ZABRANSKY_QUASIPOLYNOMIAL_C,
                      ZABRANSKY_SPLINE_SAT, ZABRANSKY_QUASIPOLYNOMIAL_SAT]:
            data = _ZabranskyDictChoser(T, ZABRANSKY_TO_DICT[method][self.CASRN])
            Tmin, Tmax = data['Tmin'], data['Tmax']
            if T < Tmin or T > Tmax:
                validity = False
        elif method == COOLPROP:
            if T <= self.CP_f.Tt or T >= self.CP_f.Tc:
                validity = False
        elif method == POLING_CONST:
            if T > self.POLING_T + 50 or T < self.POLING_T - 50:
                validity = False
        elif method == CRCSTD:
            if T > self.CRCSTD_T + 50 or T < self.CRCSTD_T - 50:
                validity = False
        elif method == DADGOSTAR_SHAW:
            pass # Valid everywhere
        elif method in [ROWLINSON_POLING, ROWLINSON_BONDI]:
            pass # No limit here
        elif method in self.tabular_data:
            # if tabular_extrapolation_permitted, good to go without checking
            if not self.tabular_extrapolation_permitted:
                Ts, properties = self.tabular_data[method]
                if T < Ts[0] or T > Ts[-1]:
                    validity = False
        else:
            raise Exception('Method not valid')
        return validity



### Solid

def Lastovka_solid(T, similarity_variable):
    r'''Calculate solid constant-pressure heat capacitiy with the similarity
    variable concept and method as shown in [1]_.

    .. math::
        C_p = 3(A_1\alpha + A_2\alpha^2)R\left(\frac{\theta}{T}\right)^2
        \frac{\exp(\theta/T)}{[\exp(\theta/T)-1]^2}
        + (C_1\alpha + C_2\alpha^2)T + (D_1\alpha + D_2\alpha^2)T^2

    Parameters
    ----------
    T : float
        Temperature of solid [K]
    similarity_variable : float
        similarity variable as defined in [1]_, [mol/g]

    Returns
    -------
    Cps : float
        Solid constant-pressure heat capacitiy, [J/kg/K]

    Notes
    -----
    Many restrictions on its use. Trained on data with MW from 12.24 g/mol
    to 402.4 g/mol, C mass fractions from 61.3% to 95.2%,
    H mass fractions from 3.73% to 15.2%, N mass fractions from 0 to 15.4%,
    O mass fractions from 0 to 18.8%, and S mass fractions from 0 to 29.6%.
    Recommended for organic compounds with low mass fractions of hetero-atoms
    and especially when molar mass exceeds 200 g/mol. This model does not show
    and effects of phase transition but should not be used passed the triple
    point.

    Original model is in terms of J/g/K. Note that the model s for predicting
    mass heat capacity, not molar heat capacity like most other methods!

    A1 = 0.013183; A2 = 0.249381; theta = 151.8675; C1 = 0.026526;
    C2 = -0.024942; D1 = 0.000025; D2 = -0.000123.

    Examples
    --------
    >>> Lastovka_solid(300, 0.2139)
    1682.063629222013

    References
    ----------
    .. [1] Laštovka, Václav, Michal Fulem, Mildred Becerra, and John M. Shaw.
       "A Similarity Variable for Estimating the Heat Capacity of Solid Organic
       Compounds: Part II. Application: Heat Capacity Calculation for
       Ill-Defined Organic Solids." Fluid Phase Equilibria 268, no. 1-2
       (June 25, 2008): 134-41. doi:10.1016/j.fluid.2008.03.018.
    '''
    A1 = 0.013183
    A2 = 0.249381
    theta = 151.8675
    C1 = 0.026526
    C2 = -0.024942
    D1 = 0.000025
    D2 = -0.000123

    Cp = (3*(A1*similarity_variable + A2*similarity_variable**2)*R*(theta/T
    )**2*exp(theta/T)/(exp(theta/T)-1)**2
    + (C1*similarity_variable + C2*similarity_variable**2)*T
    + (D1*similarity_variable + D2*similarity_variable**2)*T**2)
    Cp = Cp*1000 # J/g/K to J/kg/K
    return Cp


def Lastovka_solid_integral(T, similarity_variable):
    r'''Integrates solid constant-pressure heat capacitiy with the similarity
    variable concept and method as shown in [1]_.
    
    Uses a explicit form as derived with Sympy.

    Parameters
    ----------
    T : float
        Temperature of solid [K]
    similarity_variable : float
        similarity variable as defined in [1]_, [mol/g]

    Returns
    -------
    H : float
        Difference in enthalpy from 0 K, [J/kg]

    Notes
    -----
    Original model is in terms of J/g/K. Note that the model is for predicting
    mass heat capacity, not molar heat capacity like most other methods!

    See Also
    --------
    Lastovka_solid

    Examples
    --------
    >>> Lastovka_solid_integral(300, 0.2139)
    283246.1242170376

    References
    ----------
    .. [1] Laštovka, Václav, Michal Fulem, Mildred Becerra, and John M. Shaw.
       "A Similarity Variable for Estimating the Heat Capacity of Solid Organic
       Compounds: Part II. Application: Heat Capacity Calculation for
       Ill-Defined Organic Solids." Fluid Phase Equilibria 268, no. 1-2
       (June 25, 2008): 134-41. doi:10.1016/j.fluid.2008.03.018.
    '''
    A1 = 0.013183
    A2 = 0.249381
    theta = 151.8675
    C1 = 0.026526
    C2 = -0.024942
    D1 = 0.000025
    D2 = -0.000123
    similarity_variable2 = similarity_variable*similarity_variable
    
    return (T*T*T*(1000.*D1*similarity_variable/3. 
        + 1000.*D2*similarity_variable2/3.) + T*T*(500.*C1*similarity_variable 
        + 500.*C2*similarity_variable2)
        + (3000.*A1*R*similarity_variable*theta
        + 3000.*A2*R*similarity_variable2*theta)/(exp(theta/T) - 1.))


def Lastovka_solid_integral_over_T(T, similarity_variable):
    r'''Integrates over T solid constant-pressure heat capacitiy with the 
    similarity variable concept and method as shown in [1]_.
    
    Uses a explicit form as derived with Sympy.

    Parameters
    ----------
    T : float
        Temperature of solid [K]
    similarity_variable : float
        similarity variable as defined in [1]_, [mol/g]

    Returns
    -------
    S : float
        Difference in entropy from 0 K, [J/kg/K]

    Notes
    -----
    Original model is in terms of J/g/K. Note that the model is for predicting
    mass heat capacity, not molar heat capacity like most other methods!

    See Also
    --------
    Lastovka_solid

    Examples
    --------
    >>> Lastovka_solid_integral_over_T(300, 0.2139)
    1947.553552666818

    References
    ----------
    .. [1] Laštovka, Václav, Michal Fulem, Mildred Becerra, and John M. Shaw.
       "A Similarity Variable for Estimating the Heat Capacity of Solid Organic
       Compounds: Part II. Application: Heat Capacity Calculation for
       Ill-Defined Organic Solids." Fluid Phase Equilibria 268, no. 1-2
       (June 25, 2008): 134-41. doi:10.1016/j.fluid.2008.03.018.
    '''
    A1 = 0.013183
    A2 = 0.249381
    theta = 151.8675
    C1 = 0.026526
    C2 = -0.024942
    D1 = 0.000025
    D2 = -0.000123
    
    sim2 = similarity_variable*similarity_variable
    exp_theta_T = exp(theta/T)
    
    return (-3000.*R*similarity_variable*(A1 + A2*similarity_variable)*log(exp_theta_T - 1.) 
    + T**2*(500.*D1*similarity_variable + 500.*D2*sim2)
    + T*(1000.*C1*similarity_variable + 1000.*C2*sim2)
    + (3000.*A1*R*similarity_variable*theta 
    + 3000.*A2*R*sim2*theta)/(T*exp_theta_T - T) 
    + (3000.*A1*R*similarity_variable*theta 
    + 3000.*A2*R*sim2*theta)/T)


LASTOVKA_S = 'Lastovka, Fulem, Becerra and Shaw (2008)'
PERRY151 = '''Perry's Table 2-151'''
heat_capacity_solid_methods = [PERRY151, CRCSTD, LASTOVKA_S]
'''Holds all methods available for the HeatCapacitySolid class, for use in
iterating over them.'''


class HeatCapacitySolid(TDependentProperty):
    r'''Class for dealing with solid heat capacity as a function of temperature.
    Consists of one temperature-dependent simple expression, one constant
    value source, and one simple estimator.

    Parameters
    ----------
    similarity_variable : float, optional
        similarity variable, n_atoms/MW, [mol/g]
    MW : float, optional
        Molecular weight, [g/mol]
    CASRN : str, optional
        The CAS number of the chemical

    Notes
    -----
    A string holding each method's name is assigned to the following variables
    in this module, intended as the most convenient way to refer to a method.
    To iterate over all methods, use the list stored in
    :obj:`heat_capacity_solid_methods`.

    **PERRY151**:
        Simple polynomials with vaious exponents selected for each expression.
        Coefficients are in units of calories/mol/K. The full expression is:

        .. math::
            Cp = a + bT + c/T^2 + dT^2

        Data is available for 284 solids, from [2]_.

    **CRCSTD**:
        Values tabulated in [1]_ at 298.15 K; data is available for 529
        solids.
    **LASTOVKA_S**:
        A basic estimation method using the `similarity variable` concept;
        requires only molecular structure, so is very convenient. See
        :obj:`Lastovka_solid` for details.

    See Also
    --------
    Lastovka_solid

    References
    ----------
    .. [1] Haynes, W.M., Thomas J. Bruno, and David R. Lide. CRC Handbook of
       Chemistry and Physics. [Boca Raton, FL]: CRC press, 2014.
    .. [2] Green, Don, and Robert Perry. Perry's Chemical Engineers' Handbook,
       Eighth Edition. McGraw-Hill Professional, 2007.
    '''
    name = 'solid heat capacity'
    units = 'J/mol/K'
    interpolation_T = None
    '''No interpolation transformation by default.'''
    interpolation_property = None
    '''No interpolation transformation by default.'''
    interpolation_property_inv = None
    '''No interpolation transformation by default.'''
    tabular_extrapolation_permitted = True
    '''Allow tabular extrapolation by default; a theoretical solid phase exists
    for all chemicals at sufficiently high pressures, although few chemicals
    could stably exist in those conditions.'''
    property_min = 0
    '''Heat capacities have a minimum value of 0 at 0 K.'''
    property_max = 1E4
    '''Maximum value of Heat capacity; arbitrarily set.'''

    ranked_methods = [PERRY151, CRCSTD, LASTOVKA_S]
    '''Default rankings of the available methods.'''

    def __init__(self, CASRN='', similarity_variable=None, MW=None):
        self.similarity_variable = similarity_variable
        self.MW = MW
        self.CASRN = CASRN

        self.Tmin = None
        '''Minimum temperature at which no method can calculate the
        heat capacity under.'''
        self.Tmax = None
        '''Maximum temperature at which no method can calculate the
        heat capacity above.'''

        self.tabular_data = {}
        '''tabular_data, dict: Stored (Ts, properties) for any
        tabular data; indexed by provided or autogenerated name.'''
        self.tabular_data_interpolators = {}
        '''tabular_data_interpolators, dict: Stored (extrapolator,
        spline) tuples which are interp1d instances for each set of tabular
        data; indexed by tuple of (name, interpolation_T,
        interpolation_property, interpolation_property_inv) to ensure that
        if an interpolation transform is altered, the old interpolator which
        had been created is no longer used.'''

        self.sorted_valid_methods = []
        '''sorted_valid_methods, list: Stored methods which were found valid
        at a specific temperature; set by `T_dependent_property`.'''
        self.user_methods = []
        '''user_methods, list: Stored methods which were specified by the user
        in a ranked order of preference; set by `T_dependent_property`.'''

        self.all_methods = set()
        '''Set of all methods available for a given CASRN and properties;
        filled by :obj:`load_all_methods`.'''

        self.load_all_methods()


    def load_all_methods(self):
        r'''Method which picks out coefficients for the specified chemical
        from the various dictionaries and DataFrames storing it. All data is
        stored as attributes. This method also sets :obj:`Tmin`, :obj:`Tmax`,
        and :obj:`all_methods` as a set of methods for which the data exists for.

        Called on initialization only. See the source code for the variables at
        which the coefficients are stored. The coefficients can safely be
        altered once the class is initialized. This method can be called again
        to reset the parameters.
        '''
        methods = []
        Tmins, Tmaxs = [], []
        if self.CASRN and self.CASRN in _PerryI and 'c' in _PerryI[self.CASRN]:
            self.PERRY151_Tmin = _PerryI[self.CASRN]['c']['Tmin'] if _PerryI[self.CASRN]['c']['Tmin'] else 0
            self.PERRY151_Tmax = _PerryI[self.CASRN]['c']['Tmax'] if _PerryI[self.CASRN]['c']['Tmax'] else 2000
            self.PERRY151_const = _PerryI[self.CASRN]['c']['Const']
            self.PERRY151_lin = _PerryI[self.CASRN]['c']['Lin']
            self.PERRY151_quad = _PerryI[self.CASRN]['c']['Quad']
            self.PERRY151_quadinv = _PerryI[self.CASRN]['c']['Quadinv']
            methods.append(PERRY151)
            Tmins.append(self.PERRY151_Tmin); Tmaxs.append(self.PERRY151_Tmax)
        if self.CASRN in CRC_standard_data.index and not np.isnan(CRC_standard_data.at[self.CASRN, 'Cpc']):
            self.CRCSTD_Cp = float(CRC_standard_data.at[self.CASRN, 'Cpc'])
            methods.append(CRCSTD)
        if self.MW and self.similarity_variable:
            methods.append(LASTOVKA_S)
            Tmins.append(1.0); Tmaxs.append(10000)
            # Works above roughly 1 K up to 10K.
        self.all_methods = set(methods)
        if Tmins and Tmaxs:
            self.Tmin, self.Tmax = min(Tmins), max(Tmaxs)


    def calculate(self, T, method):
        r'''Method to calculate heat capacity of a solid at temperature `T`
        with a given method.

        This method has no exception handling; see `T_dependent_property`
        for that.

        Parameters
        ----------
        T : float
            Temperature at which to calculate heat capacity, [K]
        method : str
            Name of the method to use

        Returns
        -------
        Cp : float
            Heat capacity of the solid at T, [J/mol/K]
        '''
        if method == PERRY151:
            Cp = (self.PERRY151_const + self.PERRY151_lin*T
            + self.PERRY151_quadinv/T**2 + self.PERRY151_quad*T**2)*calorie
        elif method == CRCSTD:
            Cp = self.CRCSTD_Cp
        elif method == LASTOVKA_S:
            Cp = Lastovka_solid(T, self.similarity_variable)
            Cp = property_mass_to_molar(Cp, self.MW)
        elif method in self.tabular_data:
            Cp = self.interpolate(T, method)
        return Cp


    def test_method_validity(self, T, method):
        r'''Method to check the validity of a method. Follows the given
        ranges for all coefficient-based methods. For tabular data,
        extrapolation outside of the range is used if
        :obj:`tabular_extrapolation_permitted` is set; if it is, the
        extrapolation is considered valid for all temperatures.
        For the :obj:`Lastovka_solid` method, it is considered valid under
        10000K.

        It is not guaranteed that a method will work or give an accurate
        prediction simply because this method considers the method valid.

        Parameters
        ----------
        T : float
            Temperature at which to test the method, [K]
        method : str
            Name of the method to test

        Returns
        -------
        validity : bool
            Whether or not a method is valid
        '''
        validity = True
        if method == PERRY151:
            if T < self.PERRY151_Tmin or T > self.PERRY151_Tmax:
                validity = False
        elif method == CRCSTD:
            if T < 298.15-50 or T > 298.15+50:
                validity = False
        elif method == LASTOVKA_S:
            if T > 10000 or T < 0:
                validity = False
        elif method in self.tabular_data:
            # if tabular_extrapolation_permitted, good to go without checking
            if not self.tabular_extrapolation_permitted:
                Ts, properties = self.tabular_data[method]
                if T < Ts[0] or T > Ts[-1]:
                    validity = False
        else:
            raise Exception('Method not valid')
        return validity

    def calculate_integral(self, T1, T2, method):
        r'''Method to calculate the integral of a property with respect to
        temperature, using a specified method. Implements the analytical
        integrals of all available methods except for tabular data.
        
        Parameters
        ----------
        T1 : float
            Lower limit of integration, [K]
        T2 : float
            Upper limit of integration, [K]
        method : str
            Method for which to find the integral

        Returns
        -------
        integral : float
            Calculated integral of the property over the given range, 
            [`units*K`]
        '''
        if method == PERRY151:
            H2 = (self.PERRY151_const*T2 + 0.5*self.PERRY151_lin*T2**2 
                  - self.PERRY151_quadinv/T2 + self.PERRY151_quad*T2**3/3.)
            H1 = (self.PERRY151_const*T1 + 0.5*self.PERRY151_lin*T1**2 
                  - self.PERRY151_quadinv/T1 + self.PERRY151_quad*T1**3/3.)
            return (H2-H1)*calorie
        elif method == CRCSTD:
            return (T2-T1)*self.CRCSTD_Cp
        elif method == LASTOVKA_S:
            dH = (Lastovka_solid_integral(T2, self.similarity_variable)
                    - Lastovka_solid_integral(T1, self.similarity_variable))
            return property_mass_to_molar(dH, self.MW)
        elif method in self.tabular_data:
            return float(quad(self.calculate, T1, T2, args=(method))[0])
        else:
            raise Exception('Method not valid')

    def calculate_integral_over_T(self, T1, T2, method):
        r'''Method to calculate the integral of a property over temperature
        with respect to temperature, using a specified method. Implements the 
        analytical integrals of all available methods except for tabular data.
        
        Parameters
        ----------
        T1 : float
            Lower limit of integration, [K]
        T2 : float
            Upper limit of integration, [K]
        method : str
            Method for which to find the integral

        Returns
        -------
        integral : float
            Calculated integral of the property over the given range, 
            [`units`]
        '''
        if method == PERRY151:
            S2 = (self.PERRY151_const*log(T2) + self.PERRY151_lin*T2 
                  - self.PERRY151_quadinv/(2.*T2**2) + 0.5*self.PERRY151_quad*T2**2)
            S1 = (self.PERRY151_const*log(T1) + self.PERRY151_lin*T1
                  - self.PERRY151_quadinv/(2.*T1**2) + 0.5*self.PERRY151_quad*T1**2)
            return (S2 - S1)*calorie
        elif method == CRCSTD:
            S2 = self.CRCSTD_Cp*log(T2)
            S1 = self.CRCSTD_Cp*log(T1)
            return (S2 - S1)
        elif method == LASTOVKA_S:
            dS = (Lastovka_solid_integral_over_T(T2, self.similarity_variable)
                    - Lastovka_solid_integral_over_T(T1, self.similarity_variable))
            return property_mass_to_molar(dS, self.MW)
        elif method in self.tabular_data:
            return float(quad(lambda T: self.calculate(T, method)/T, T1, T2)[0])
        else:
            raise Exception('Method not valid')



### Mixture heat capacities

def Cp_liq_mixture(zs=None, ws=None, Cps=None, T=None, CASRNs=None, AvailableMethods=False, Method=None):  # pragma: no cover
    '''This function handles the retrival of a mixture's liquid heat capacity.

    This API is considered experimental, and is expected to be removed in a
    future release in favor of a more complete object-oriented interface.

    >>> Cp_liq_mixture(ws=[0.6, 0.3, 0.1], Cps=[4180.59, 2532.45, 2268.80])
    3494.969
    '''
    def list_methods():
        methods = []
        if CASRNs and len(CASRNs) > 1 and '7732-18-5' in CASRNs and T and ws:
            wCASRNs = list(CASRNs)
            wCASRNs.remove('7732-18-5')
            if all([i in _Laliberte_Heat_Capacity_ParametersDict for i in wCASRNs]):
                methods.append('Laliberte')
        if none_and_length_check([Cps]):
            methods.append('Simple')
        methods.append('None')
        return methods
    if AvailableMethods:
        return list_methods()
    if not Method:
        Method = list_methods()[0]
    # This is the calculate, given the method section
    if not none_and_length_check([Cps, ws]): # check same-length inputs
#        raise Exception('Function inputs are incorrect format')
        return None
    if Method == 'Simple':
        _cp = mixing_simple(ws, Cps)
    elif Method == 'Laliberte':
        ws = list(ws)
        ws.remove(ws[CASRNs.index('7732-18-5')])
        wCASRNs = list(CASRNs)
        wCASRNs.remove('7732-18-5')
        _cp = Laliberte_heat_capacity(T, ws, wCASRNs)
    elif Method == 'None':
        return None
    else:
        raise Exception('Failure in in function')
    return _cp


def Cp_gas_mixture(zs=None, ws=None, Cps=None, CASRNs=None, AvailableMethods=False, Method=None):  # pragma: no cover
    '''This function handles the retrival of a mixture's gas heat capacity.

    This API is considered experimental, and is expected to be removed in a
    future release in favor of a more complete object-oriented interface.

    >>> Cp_gas_mixture(ws=[0.6, 0.3, 0.1], Cps=[1864.17, 1375.76, 1654.71])
    1696.701
    '''
    def list_methods():
        methods = []
        if none_and_length_check([Cps]):
            methods.append('Simple')
        methods.append('None')
        return methods
    if AvailableMethods:
        return list_methods()
    if not Method:
        Method = list_methods()[0]
    # This is the calculate, given the method section
    if not none_and_length_check([Cps, ws]): # check same-length inputs
        return None
#        raise Exception('Function inputs are incorrect format')
    if Method == 'Simple':
        _cp = mixing_simple(ws, Cps)
    elif Method == 'None':
        return None
    else:
        raise Exception('Failure in in function')
    return _cp


def Cv_gas_mixture(zs=None,  ws=None, Cps=None, CASRNs=None, AvailableMethods=False, Method=None):  # pragma: no cover
    '''This function handles the retrival of a mixture's gas constant
    volume heat capacity.

    This API is considered experimental, and is expected to be removed in a
    future release in favor of a more complete object-oriented interface.

    >>> Cv_gas_mixture(ws=[0.6, 0.3, 0.1], Cps=[1402.64, 1116.27, 1558.23])
    1332.2880000000002
    '''
    def list_methods():
        methods = []
        if none_and_length_check([Cps]):
            methods.append('Simple')
        methods.append('None')
        return methods
    if AvailableMethods:
        return list_methods()
    if not Method:
        Method = list_methods()[0]
    # This is the calculate, given the method section
    if not none_and_length_check((Cps, ws)): # check same-length inputs
        return None
#        raise Exception('Function inputs are incorrect format')
    if Method == 'Simple':
        _cp = mixing_simple(ws, Cps)
    elif Method == 'None':
        return None
    else:
        raise Exception('Failure in in function')
    return _cp


